#!/bin/ksh

###############################################################################
#                              f05_1AGCM.post
###############################################################################
#

set -e
export task=POST     # The task: RUN, ARCH, POST, MON, REM
print "\n Start of script at\t$(date)\n - on host or node\t$(hostname)"

#-- svn revision of util/running

svn_rev=
svn_url=http://svn-mad.zmaw.de/svn/mad/Model/IMDI/trunk

#------------------------------------------------------------------------------
#   TIME PARAMETERS
#------------------------------------------------------------------------------

jobnum=Jobnum
startdate=Startdate
nextdate=Nextdate
inidate=Inidate
findate=Findate



#------------------------------------------------------------------------------
#        SETUP OF EXPERIMENT
#------------------------------------------------------------------------------

#
#-- Project ID
#

export proid=c5_
export groupwrite=no

#
#-- Experiment ID
#

export expid=f05_1AGCM  
export parent_experiment="piControl"                                      # CMOR CV
export parent_member="r1i1p1"                                             # CMOR CV
export parent_branch_time=18500101,18791231
export forcing_text="GHG Oz SD Sl Vl LU"                                  # CMOR CV

#
#-- Coupled model name
#

export cplmod=mpiesm-asob

#
#-- Node name / OS of the computing host
#

export node=aix

#
#-- components
#

atmmod=echam6
srfmod=jsbach
ocemod=mpiom
bgcmod=hamocc
coupler=oasis3

###############################################################################
#
#     USER INTERFACE
#
###############################################################################

export verbose=no                # yes/no 

#-- PREFIX_BIN:  Permanent file system for the SCRIPTS on the COMPUTING HOST
#-- PREFIX_IN:    Root directory of the LONG TERM INPUT data archive.
#-- PREFIX_DATA:  Root directory of the SHORT TERM data server.
#-- PREFIX_ARCH:  Root directory of the LONG TERM OUTPUT data archive.
#-- PREFIX_WORK:  Root directory for the temporary working directory
#-- PREFIX_CMOR:  Root directory for the cmorised output


PREFIX=$(cd ../../.. ; pwd )
PREFIX_BIN=$PREFIX             
PREFIX_IN=/work/ik0555/cmip5
PREFIX_DATA=$PREFIX
PREFIX_WORK=$PREFIX
PREFIX_CMOR=$PREFIX

GROUP=$(cat $HOME/.acct 2> /dev/null)
GROUP=${GROUP:-$(id -Gn | tr ' ' '\n' | egrep '^[a-z]{2}[0-9]{4}$' | head -1)}

PREFIX_ARCH=/hpss/arch/$GROUP/$LOGNAME
HOST_ARCH=xtape.dkrz.de

VERSION=
[[ -z "$VERSION" ]] && read DUMMY VERSION < $PREFIX/.revision_stamp

#------------------------------------------------------------------------------
#   Configuration of component(s)
#------------------------------------------------------------------------------

#
#-- ECHAM
#
res_atm=T63                 # grid acronym (T21/T31/T42/T63/T85/T106/T127/T159)
vres_atm=47                 # number of vertical levels
dt_write_atm=6              # time interval of output writing in hours
lco2=false                  # true: prognostic CO2 mass mixing ratio
nml_suf_echam=historical-LR # namelist file name suffix (in adjunct_files)
atm_out_filetype=1          # output file format: 1=GRIB (def) / 2=NETCDF
atm_out_ztype=0             # file compression: 0=NONE/1=GRIB SZIP (def)/2=ZIP
atm_restart_filetype=4      # restart file format: 4=NETCDF (def)
iaero=5                     # time dependent aerosol forcing (3) incl.volcanic(5)
io3=4                       # time dependent ozone forcing
isolrad=1                   # time dependent solar irradiance
ighg=1                      # read RCP greenhouse gases input data
ico2=4
lco2_scenario=true
icfc=4
ich4=4
in2o=4

atmvers=v$VERSION
nhd_diag=1
lcouple_co2=true
COSP=false                   # cosp diagnostic is switched of in mpiesm-1.0.00 
#
#-- JSBACH
#
dynveg=true                  # calculate dynamic vegetation (true/false)
dynveg_feedback=true         # feedback of dyn. vegetation on climate activated
ntiles=11                    # number of tiles
read_cpools=false            # read cpools file at start of initialized exp
lcc_forcing_type=transitions # Scheme for landuse change (none, maps, transitions)
read_fpc=false               # true:read frac. plant cover file at exp start
refyear=1850                 # reference year of initial data (e.g. cpools)
nml_suf_jsbach=c5            # namelist file name suffix (in adjunct_files) 
srf_out_filetype=GRIB        # output file format: GRIB (def) / NETCDF
srf_restart_filetype=NETCDF  # restart file format: NETCDF
lctlibvers=nlct21.def
transition_scenario=historical # landuse transition scenario (only with
                               #      lcc_forcing_type=transitions)
                               #      historical / rcp45 / rcp85 / rcp26 / no
                               #      no: no transitions, harvest from refyear

#
#-- MPIOM
#
res_oce=GR15             # grid acronym (GR30/GR15/TP10/TP04/TP01)
vres_oce=40              # number of vertical levels
nml_suf_mpiom=c5-LR      # namelist file name suffix (in adjunct_files)
nfixYearLen=-1           #
istart=3                 # start experiment from Levitus climatology
oce_out_filetype=nc      # format of model output (sz/grb/ex/nc)
oce_restart_filetype=nc  # format of model restart file (ex/nc)
ocevers=v$VERSION

#
#-- HAMOCC
#
nml_suf_hamocc=c5-LR     # tag for namelist (in adjunct_files) 

#
#-- if unexplained crashes; for different: 
#       - change value of enstdif (e.g. 1.0001) (ECHAM6 namelist dynctl)
#       - add lines if necessary but do not remove !
#
set_enstdif="[[ \$(echo \${startdate} | cut -c1-4) = YYYY ]] && enstdif=1.0001"

#-- Executable name as stored in .../bin


atmbin=${atmmod}_c5-asob_$atmvers.x
ocebin=${ocemod}_${bgcmod}_c5-asob_$ocevers.x
cplbin=${coupler}_MPI1_v$VERSION.x

#------------------------------------------------------------------------------
# End of component configuration
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
#   TIME CONTROL
#------------------------------------------------------------------------------

#
#-- calendar type: Available calendar options:
#     0   : No leap year (365 days per year)
#     1   : Gregorian (365/366 days per year)
#     n   : Equal months of "n" days (30 for 30 day months)

caltype=1
#------------------------------------------------------------------------------
#   CONNECTION TO COMPILE SYSTEM
#------------------------------------------------------------------------------

#
#-- name of compiler (set according to Create_TASKS parameter specifications)

compiler=xlf

#
#-- (symbolic) node name of the compile-server

compile_server=aix

#------------------------------------------------------------------------------
#   FILE SYSTEMS
#------------------------------------------------------------------------------
#
#-- home:  Permanent file system for the SCRIPTS on the COMPUTING HOST
#          (only needs to be specified if the tasks are NOT generated on the 
#          computing host)

export home=$PREFIX_BIN/experiments

#
#-- archive_in:  Root directory of the LONG TERM INPUT data archive. It needs
#                to reside on the same machine as the output archive. This 
#                archive is intended for input data that is needed with 
#                several experiments, e.g. initial , forcing or restart files.
#                The parent-directory needs to exist before job submission.

export archive_in=$PREFIX_IN/experiments

#
#-- data:  Root directory of the SHORT TERM data server.
#          Model INPUT and OUTPUT will be read from/written to 
#          this file system of the computing host
#          The parent-directory needs to exist before job submission.

export data=$PREFIX_DATA/experiments

#
#-- archive:  Root directory of the LONG TERM OUTPUT data archive:
#             a filesystem of the computing or of the remote archiving host. 
#             If ${archive} differs from ${data} model output will be saved
#             in ${archive} and removed from ${data}.
#             The parent-directory needs to exist before job submission.

export archive=$PREFIX_ARCH/experiments

#
#-- work:  Root directory for the temporary working directory
#             (for production runs use $TMPDIR on NEC)
#

work=$PREFIX_WORK/experiments

#
#-- Path to the IMDI function directory
#
export fpath=$home/../util/running/functions

#
#-- <modelcomp>_bindir:   Directory of the model executables.
#
 
export atm_bindir=$PREFIX/AIX-xlf/bin
export oce_bindir=$PREFIX/AIX-xlf/bin
export cpl_bindir=$PREFIX/AIX-xlf/bin

#------------------------------------------------------------------------------
#   PLATFORM DEPENDEND SPECIFICATIONS
#------------------------------------------------------------------------------

#
#-- Node name of archiving host  (empty if archiving on local file system)
#
export archiving_host=$HOST_ARCH       #  pftp on the DKRZ HPSS archive

#------------------------------------------------------------------------------
#   UNIX COMMANDS
#------------------------------------------------------------------------------

export mkdir="mkdir -p"    # create a new directory
export cp="cp -p"          # copy without changing the time stamp
export ln="ln -s"          # sym/hard link: no err/err if non-existing target
export rm=rm               # remove
export rtp="pftp"          # remote transfer protocol
export rtp_post="$rtp"     # transfer protocol to remote processing host
export put_archive=""      # command to put files to tape archive (e.g. dsmc)
export get_archive=""      # command to get files from tape archive (e.g. dsmc)
export gunzip="gzip -d"    # unzip a file that was zipped using gzip

export cdo=/sw/aix61/cdo-1.5.0/bin/cdo
export afterburner=/sw/aix61/after-4.6.3/bin/after
export grib=/sw/aix61/grib-1.4.5.1/bin/grib
export python=/sw/aix61/Python-2.6.4/bin/python

export ncdump=/sw/aix61/netcdf-4.1.1-rc1/bin/ncdump
export nco=/sw/aix53/nco-3.9.9-64bit/bin


#------------------------------------------------------------------------------
#   CONFIGURE POST PROCESSING
#------------------------------------------------------------------------------

#-- activate rsp. deactivate c5 data processing 

proc_cfmip=no 
  
DoAllVarsP=true
DoAllVarsC=true

post_proc_echam=yes; cmor_proc_echam=yes
apco2=true

post_proc_jsbach=yes; cmor_proc_jsbach=yes
acfco2nat=true
lpburntArea=true
lcburntArea=true
acfLuc=true
acfFire=true
acnbp=true

post_proc_mpiom=yes; cmor_proc_mpiom=yes
ocumo=true
ochfds=true
oczosga=true
optransifs=true
octransifs=true
opmfo=true
ocmfo=true
opfix=true
opzostoga=true
oczostoga=true

post_proc_hamocc=no; cmor_proc_hamocc=yes
hcco3satcalc=true

#-- number of threads used with the afterburner

export athread=4

pcpu_per_node=64; popt="-P ${athread}"

#
#-- cmor program executable name (incl. version number)
#
c5arch_root=$PREFIX_CMOR/archive

cmor=$PREFIX/AIX-sxlf/bin/cmor2_prog_v$VERSION.x

#
#-- ECHAM std processing in addition to CMIP5 (configurable)
#

#-- Pressure levels for std ECHAM afterburner post-processing
#
levels_pressure_echam6_ATM="100000,92500,85000,77500,70000,60000,50000,40000,
                            30000,25000,20000,15000,10000,7000,5000,3000,1000"

#-- 2D 'BOT'
cl_POST_echam_BOT_mm="85,86,87,88,91,92,93,94,95,96,97,
    102,103,104,105,106,107,108,109,110,111,112,
    114,116,117,119,120,121,122,123,124,137,139,145,175,178,
    193,197,208,209,210,211,213,214,221,222,229,233,235,260"
[[ "${ocemod}" = "" ]] || \
 cl_POST_echam_BOT_mm="${cl_POST_echam_BOT_mm},83,84,219"

#-- 3D monthly 'ATM'
cl_POST_echam_ATM_mm_type30="130,131,132,133,153,154,156,157,223"

# 3-dim LOG codes for special vertical resolutions
cl_POST_echam_LOG_mm="130,131,132"

#-- 3D monthly 'ATM'
cl_POST_echam_ATM_mm_type70="149"

#-- 2D monthly 'co2'; note: 24 should be used as daily or monthly mean only
cl_POST_echam_co2_mm="5,6,8,24,25,26"
[[ ${lcouple_co2:-false} = true ]] \
                       && cl_POST_echam_co2_mm=${cl_POST_echam_co2_mm}",17"
[[ "${ocemod}" = "" ]] || cl_POST_echam_co2_mm=${cl_POST_echam_co2_mm}",07,20"

#-- 2D monthly 'tracer'
cl_POST_echam_tracer_mm="1"

#-- 2D daily 'co2'
cl_POST_echam_co2_dm="5,8"

#
#-- ECHAM CMOR processing (not configurable in CMIP5 project)
#

#-- CMIP5 'Amon' 'alevel' (type20=hybrid,gauss)
cl_Amon_echam_alevel="153,154,223,134"
#-- CMIP5 'Amon' 'plevs'
cl_Amon_echam_plevs="130,131,132,133,157,135,156,236"
cl_Amon_echam_plevs_2="157,135,156,236"
cl_Amon_echam_plevs_1="130,131,132,133"
#-- CMIP5 'Amon' 'agrid'
cl_Amon_echam_agrid="160,161,167,169,202,201,151,134,150,165,166,168,
    140,141,142,143,144,115,113,180,181,147,146,177,205,204,182,185,
    171,176,186,184,203,179,188,187,230,164,231,217,218"

#-- CMIP5 'day' 'plevday'
cl_day_echam_plevday="130,156,157,133,135,132,131"
#-- CMIP5 'day' 'agrid'
cl_day_echam_agrid="97,102,141,142,143,144,146,147,151,
    160,164,165,166,167,169,171,176,177,179,204,205"
#-- CMIP5 'day' 'agrid' (min)
cl_day_echam_agrid_min="202"                             
#-- CMIP5 'day' 'agrid' (max)
cl_day_echam_agrid_max="201,216"

#-- CMIP5 '6hrPlev' 3d 'plevsyn'
cl_6hrPlev_echam_plevsyn="151,130,132,131"

#-- CMIP5 pressure levels 'plevs' required for 'Amon' 
#
plevs="100000,92500,85000,70000,60000,50000,40000,30000,25000,20000,
       15000,10000,7000,5000,3000,2000,1000,700,500,300,200,100,40,20,10"

#-- CMIP5 pressure levels 'plevday'  required for 'day' 
#
plevday="100000,85000,70000,50000,25000,15000,10000,7000,5000,
         3000,1000,300,100,30,10"

#-- CMIP5 pPressure levels 'plevsyn'  required for '6hrPlev'
#
plevsyn="85000,50000,25000"

#-- CMIP5 pPressure levels 'plevlog'  required for 'LOG'
#
plevlog="100935, 99567, 97166, 93994, 90264, 86141, 81754, 77211,
        72595, 67961, 63353, 58808, 54350, 49998, 45770, 41687,
        37755, 33987, 30402, 27015, 23833, 20867, 18116, 15578,
        13239, 11066,  9102,  7406,  5964,  4752,  3743,  2914,
         2235,  1685,  1245,   901,   637,   440,   296,   193,
          122,    74,    43,    23,    11,     4,     1"

#
#-- JSBACH std processing in addition to CMIP5 (configurable)
#

#-- main stream
cl_POST_jsbach_main_mm="12,21,22,55,107,116,124,126,148"
[[ ${dynveg} = false ]] || \
  cl_POST_jsbach_main_mm="${cl_POST_jsbach_main_mm},20"

#-- land stream
cl_POST_jsbach_land_mm="40,44,60,67,68,76,107,109,110,124,126,148,149"

#-- veg stream
cl_POST_jsbach_veg_mm="157,158,159,160,161,162,163,164,165,166,167,168,169"
cl_POST_jsbach_veg_mm="${cl_POST_jsbach_veg_mm},170,171,172,173,175,176,179"
if [[ ${dynveg} = true ]]; then
  cl_POST_jsbach_veg_mm="${cl_POST_jsbach_veg_mm},18,19,20,21,23,31,32,33"
  cl_POST_jsbach_veg_mm="${cl_POST_jsbach_veg_mm},34,35,38,39,40,43,44,45"
else
  cl_POST_jsbach_veg_mm="${cl_POST_jsbach_veg_mm},177"
fi

#-- surf stream
cl_POST_jsbach_surf_mm="203,204,205,206,207,212,213"

#
#-- CMOR processing (not configurable in CMIP5 project)
#

#-- land stream
cl_CMOR_jsbach_land_mm="60,76,107"                         # 68 appended below
cl_CMOR_jsbach_land_dm="60"


#-- veg stream
cl_CMOR_jsbach_veg="159,160,161,162,163,164,170,171,173,175,179"

#
#-- Code lists, files, and constants for MPIOM model output processing
#
#-- option 1:
zosga=0.000; zossga=0.000      # reference for (steric) sea level change
zosgadir=${archive_in}/input/mpiom/${res_oce}
zosgaFile=$zosgadir/piControl_r1i1p1-LR_mpiom_timeser_dm_18500101_18501231.nc
#-- option 2:
zostoga=2.0604                 # calculate 1st yr with post_proc_MPIOM=yes
zosga=0.46074 ;zossga=2.7358   # optional
 
mpiom_fx=${archive_in}/input/${ocemod}/${res_oce}/${res_oce}L${vres_oce}_fx.nc


###############################################################################
#
#      END OF THE USER INTERFACE
#
###############################################################################


set -e
#------------------------------------------------------------------------------
#  Complete setup 
#------------------------------------------------------------------------------

#
#-- get CMIP5 MPI-ESM model acronym
#
res_mod=$(echo $expid | cut -f2 -d"-")

#
#-- coupling
#
timtransa2o=INSTANT

dta2o=86400

#
#-- JSBACH
#
srf_restart=${atm_restart}
res_srf=${res_atm}
[[ ! "$srf_out_ztype" = "" ]] || srf_out_ztype="${atm_out_ztype}"

#
#-- hydrology
#
hd=true

#
#-- MPIOM
#
nx_oce=256
ny_oce=220
nodt=4320

#
#-- HAMOCC
#
res_bgc=${res_oce}
nbdt=${nodt}

#
#-- ECHAM
#
[[ ${res_atm} = T31 ]] && isolrad=1       #isolrad=0 not possible with T31
nadt=600

#
#-- Executable name for launching etc.
#
oceexec=${ocemod}
atmexec=${atmmod}
cplexec=oasis.x

atm_src_revision=$(echo $atmbin | cut -f3 -d"_" | cut -c2-5)
oce_src_revision=$(echo $ocebin | cut -f4 -d"_" | cut -c2-5)

#------------------------------------------------------------------------------
#   Definition of the functions 
#------------------------------------------------------------------------------

export PATH=${fpath}:$PATH 

. function_check_size
. function_check_codes
. function_dbfill
. function_generate_tarfile
. function_get_file
. function_get_model_resolution
. function_get_tarfile
. function_make_directories
. function_put_file
. function_plot_file
. function_pperror

#------------------------------------------------------------------------------
#   Job specification
#------------------------------------------------------------------------------

qsub="$(submit_command -q LL)"        # submit command

if [ -z "${qsub}" ]; then # interactive run
  jobdir=$(dirname $0) ; cd ${jobdir} ; jobdir=$(pwd) # script directory
  print " - submitted        \tinteractively"
else                 
  jobdir=${home}/${expid}/scripts                     # script directory
  print " - submitted by    \t LL"
fi

job=$(job_name -q LL -s $(basename $0))    # script name
jobid=$(job_identifier -q LL -e ${expid})  # job-id
print " - job name         \t${job}"
print " - job id           \t${jobid}\n - job directory    \t${jobdir}\n"

#------------------------------------------------------------------------------
#   Directory definitions
#------------------------------------------------------------------------------

exphome=${data}/${expid}          # Root directory of the experiment (data)

[ ${host_rem:-NotSet} = NotSet ] || {
  if [ "$(hostname)" = "${host_rem%%.*}" ] ; then 
   exphome=${path_rem:-""}/${expid}   # the above, if processing is remote
  fi
  }
export bindir=${exphome}/bin      # Directory of the executables
export inpdir=${exphome}/input    # Directory of the input files
export restdir=${exphome}/restart # Directory of the restart files
export outdir=${exphome}/outdata  # Directory of the output data files
export logdir=${exphome}/log      # Directory of the log data files
export postdir=${exphome}/post    # Directory for post-processed data

#-- Definition of some time variables

# enddate:      last day of this run
# prevdate:     last day of the previous run 
# startyear:    year at the beginning of this run
# prevyear:     year at the last day of the previous run
# prevdecade:   decade at the last day of the previous run
# previd:       job-id of the previous run (from expid.log)

enddate=$(calc_date minus -c${caltype} -D1 -- ${nextdate})
prevdate=$(calc_date minus -c${caltype} -D1 -- ${startdate})
startyear=$(format_date -f4 -- ${startdate} | cut -f1 -d" ")
prevyear=$(format_date -f4 -- ${prevdate} | cut -f1 -d" ")
prevdecade=${prevyear%?}

if [[ -r ${jobdir}/${expid}.log ]];then
  loginfo=$(get_logpid -d ${startdate} -f ${jobdir}/${expid}.log)
  if [[ -n ${loginfo} ]];then
    previd=${loginfo%[ ]*}
    prevstart=${loginfo#*[ ]}
  else
    printf "%s%s\n" "   |- WARNING : Can not find message for ${startdate}" \
                    " in" "      ${jobdir}/${expid}.log"
    previd=
    prevstart=${startdate}
  fi
else
  printf "   |- WARNING : Can not access log file \n\t\t${jobdir}/${expid}.log\n"
  printf "   |            log files of previous run can not be archived !\n\n"
fi

################################################################################
#
#  Post-processing
#
################################################################################

. c5_outflag
. c5_request
. c5_find_chunk

CDO_LOG_OFF=1

year=$(echo ${startdate}  | cut -c1-4)
iniyear=$(echo ${inidate} | cut -c1-4)
finyear=$(echo ${findate} | cut -c1-4) 

printf "\n%s\n" " |- Post processing is started for year $year"

b=""; n=""; [[ "$?USER" == 1 ]] || { b="\\033[1m"; n="\\033[0m"; }

project_text=CMIP5
esmmod=MPI-ESM
expName=$(echo $expid   | cut -f1 -d"-")
member=$(echo  $expName | cut -f2 -d"_")        
expName=$(echo $expName | cut -f1 -d"_")
[[ $expName = abrupt4xco2 ]] && expName=abrupt4xCO2
[[ $expName = 1pctCo2 ]] && expName=1pctCO2
res_mod=$(echo $expid   | cut -f2 -d"-")
realisation=$(echo $member | cut -f1 -d"i") 
physics=p$(echo $member | cut -f2 -d"p")   
initmethod=i$(echo $member | cut -f2 -d"i" | cut -f1 -d"p")  

[[ $parent_experiment = ${expName} ]] && parent_experiment=N/A


## For rcp experiments and from year 2101 assure correct CMOR-CV forcing_text
exptype=$(echo "$exName" | cut -c-3)
[[ $year = 2101 && $exptype = rcp ]]  && {
    printf "%s%s\n%s\n" "ATTENTION: potential ERROR: Ensure that " \
                    "forcing_text (= ${forcing_text}) is set correctly." \
                    "If so, comment out the exit below."
    exit 1; 
}

#
#-- add IMDI URL and revision to history_text
#
history_text="Model raw output postprocessing with modelling environment (IMDI)"
history_text="${history_text} at DKRZ: URL: ${svn_url}, REV: ${svn_rev}"

src_text="MPI-ESM-${res_mod} 2011;"
src_text="${src_text} URL: http://svn.zmaw.de/svn/cosmos/branches/releases/mpi-esm-cmip5/src/mod;"
src_text="${src_text} atmosphere: ECHAM6 (REV: $atm_src_revision), T63L47;"
src_text="${src_text} land: JSBACH (REV: $atm_src_revision);" 
ref_text="ECHAM6: n/a;"
ref_text="${ref_text} JSBACH: Raddatz et al., 2007. Will the tropical land biosphere dominate the"
ref_text="${ref_text} climate-carbon cycle feedback during the twenty first century?"
ref_text="${ref_text} Climate Dynamics, 29, 565-574, doi 10.1007/s00382-007-0247-8;"
[[ "${ocemod}" = "" ]] || {
 src_text="${src_text} ocean: MPIOM (REV: $oce_src_revision), GR15L40;"
 src_text="${src_text} sea ice: $oce_src_revision;"
 src_text="${src_text} marine bgc: HAMOCC (REV: $oce_src_revision);"
 ref_text="${ref_text}  MPIOM: Marsland et al., 2003."
 ref_text="${ref_text} The Max-Planck-Institute global ocean/sea ice model with orthogonal curvilinear coordinates."
 ref_text="${ref_text} Ocean Modelling, 5, 91-127;"
 ref_text="${ref_text}  HAMOCC: Technical Documentation, http://www.mpimet.mpg.de/fileadmin/models/MPIOM/HAMOCC5.1_TECHNICAL_REPORT.pdf;"
}


#
#-- CMIP5 archive specification
#
c5archdir=${c5arch_root}/${project_text}/output/MPI-M/${esmmod}-${res_mod}/${expName}
[[ -d $c5archdir ]] || mkdir -p $c5archdir

#
#-- restore CMOR2 files from before this run
#

cmor_restore=no
if [ $cmor_restore = yes ]; then
  
  cd $c5archdir
  pattern="*/*/*/${member}/*_*_${esmmod}-${res_mod}_${expName}_${member}_*-${prevyear}*"
  saved_files=$(ls -m ${pattern}.nc.save 2>/dev/null || saved_files="")
  saved_files=$(echo $saved_files | tr , " ")

  if [[ "$saved_files" = "" ]]; then
    printf "\n%s\n\n" "   |- WARNING: No files to restore."
  else
    for file in $saved_files; do
      echo "Restoring $file ..."
      prevfile=$(basename $file .save)
      direc=$(dirname $file)
      mv $file $direc/$prevfile
    done
  fi
  printf "\n%s\n\n" "   |- Restored state from after last post processing."
  exit
fi

typeset -Z2 moI2
moS=$(echo $startdate | cut -c5-6); moE=$(echo $enddate | cut -c5-6)

moI2=$moS ; Months=$moS
while [ $moI2 -lt $moE ]; do
  moI2=$(expr $moI2 + 1)
  Months=$Months" $moI2"
done
RecMo=$(expr $moE - $moS + 1)
RecDay=0
for mo in $Months; do
  Anzdays=$(days_in_month $mo $year ) 
  RecDay=$(expr $RecDay + $Anzdays )
done

#
#-- years of climatology in Oclim table
#
fOclimYr=1986; lOclimYr=2005 

#
#-- constant input for cmor calls
#
if   [[ $(echo $expName | cut -c1-3) = rcp    || \
        $(echo $expName | cut -c1-6) = esmrcp     ]]; then
  baseyear=1850
elif [[ $expName = historical && ${res_mod} = P   ]]; then
  baseyear=0850
else
  baseyear=$iniyear
fi

# Allow CMOR input to be read from alternative input directory
# Provide backwards compatibility for original CMIP5 input data

gridfile_dirname="${archive_in}/input/cmor2/grids"
tabdir="${archive_in}/input/cmor2/tables"

if [[ ${archive_in} == /work/ik0555/cmip5/* ]]; then
  gridfile_dirname="${archive_in}/input/grids"
  tabdir="/work/ik0555/cmip5/cmor2/cmip5-cmor-tables/Tables"
fi

cat -> ${outdir}/CMORCONST.txt << EOF1
&CMORCONST
 INIT_YEAR          = ${baseyear}
 INPUT_DIRNAME      = "."
 OUTPUT_DIRNAME     = "$c5arch_root"
 GRIDFILE_DIRNAME   = "${gridfile_dirname}"
 BRANCH_T           = ${parent_branch_time}
 EXPEID             = "${expName}"
 RUN                = "${realisation}"
 INM                = "${initmethod}"
 PHV                = "${physics}"
 MOD_ID             = "${esmmod}-${res_mod}"
 HISTORY_TEXT       = "${history_text}"
 PROJECT_TEXT       = "${project_text}"
 PAR_MOD            = "${parent_experiment}"
 PAR_RIP            = "${parent_member}"
 TABDIR             = "${tabdir}"
 ZOSCONST           = ${zosga},${zossga}
 SOURCE_TEXT        = "${src_text}"
 CONTACT_TEXT       = "cmip5-mpi-esm@dkrz.de"
 COMMENT_TEXT       = "${global_comment:-""}"
 REFERENCES_TEXT    = "${ref_text}"
 CALENDAR_TEXT      = "proleptic_gregorian"
 FORCING_TEXT       = "${forcing_text}"
/
EOF1
#################################################################################
#
#  Post processing of JSBACH output diagnostic files
#
#  Note: Codes 12/20(cover_fract/veg_ratio_max) vary only if dynveg=true.
#        Is is updated at the first timestep in Jan each year. 
#        cover_fract is defined on tiles, veg_ratio_max is 2-dimensional.
#        veg_ratio_max is output only if dynveg=true.
#        Both codes are also available as climatologies from the JSBACH
#        initial file.
#        All months are the same unless lcc_forcing_type!=none.
#        Then crop and pasture variables vary for each time step 
#        (and with them cover_fract).
#
#################################################################################

cd ${outdir}/${srfmod}
[[ -d tmpdir_post ]] || { mkdir tmpdir_post; [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx tmpdir_post || true; }; }
[[ -d input_cmor  ]] || { mkdir input_cmor;  [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx input_cmor  || true; }; }

grid=${res_atm}${res_oce}_${ntiles}tiles
jsbach_inidir=${archive_in}/input/${srfmod}/${res_srf}
jsbach_inifile=${jsbach_inidir}/jsbach_${grid}_${refyear}.nc

fmmsg="ERROR: Missing input file:"

suff=.grb

if [[ $atm_src_revision -ge 4550 ]]; then
  code107=correct
fi

#################################################################################
#
#-- cdo processing:

if [[ $post_proc_jsbach = yes ]]; then

err=tmpdir_post/${expid}.${srfmod}.post.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.${srfmod}.post.${enddate}.out; rm -f ${out}*
printf "#-- Start of JSBACH post processing      at $(date)\n"    > $err.00

tmpout=tmpdir_post/load_balance_post.txt; rm -f $tmpout
printf "#-- JSBACH: Begin of POST loadbalance at $(date)\n"    > $tmpout

slm=${outdir}/slm.grb

[[ ${lpburntArea:-false} = true ]] && lpsetyear=true

#-- constant fields; mv to outdata (only at the start of each experiment)
if [[ ${DoAllVarsP:-true} = true || ${lpconst_fields:-false} = true ]]; then

([[ $jobnum = 1 ]] && {
echo "lpconst_fields begin: $(date)" >> $tmpout
  msg="#-- CDO selection of slm,glac,maxmoist plus code129 from echam6 "; echo $msg >> $err.00
  $cdo -f grb selname,slm,glac,maxmoist ${jsbach_inifile} ${outdir}/jsbach/tmpdir_post/fxl.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 1a: $msg" >> $err.00; exit 1; }
  orogfile=${expid}_echam6_echam_${year}01${suff} 
  $cdo -f grb setcode,7 -divc,9.80665 -seltimestep,1 -selcode,129 \
    ${outdir}/echam6/${orogfile} ${outdir}/jsbach/tmpdir_post/fx129.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 1b: $msg" >> $err.00; exit 1; }
  rm -f ${outdir}/fx129.grb
  $cdo -f grb merge ${outdir}/jsbach/tmpdir_post/fxl.grb \
    ${outdir}/jsbach/tmpdir_post/fx129.grb ${outdir}/fx129.grb\
    2>>$out.00 1>>$err.00 || { echo "ERROR: 1c: $msg" >> $err.00; exit 1; }
    cp ${outdir}/fx129.grb ${outdir}/fx.grb
  $cdo selcode,11 ${outdir}/fx.grb ${outdir}/maxmoist.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 2: $msg" >> $err.00; exit 1; }
  $cdo selcode,4 ${outdir}/fx.grb ${slm} \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 3: $msg" >> $err.00; exit 1; }
  $cdo ifthen ${slm} ${outdir}/maxmoist.grb ${outdir}/mrsofc.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 4: $msg" >> $err.00; exit 1; }
  msg="#-- CDO selection of veg_ratio_max from initial file"; echo $msg >> $err.00
  $cdo -f grb selname,veg_ratio_max ${jsbach_inifile} ${outdir}/veg_ratio_max_ini.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 5: $msg" >> $err.00; exit 1; }
  $cdo settime,18:00:00 -ifthen ${slm} -setcode,20 ${outdir}/veg_ratio_max_ini.grb tmpfile1_${year} \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 6: $msg" >> $err.00; exit 1; }
  rm -f ${outdir}/veg_ratio_max_ini_mm.grb; touch ${outdir}/veg_ratio_max_ini_mm.grb
  for mo in 01 02 03 04 05 06 07 08 09 10 11 12; do
    $cdo setdate,0001-$mo-15 tmpfile1_${year} veg_ratio_max_ini_${mo} \
      2>>$out.00 1>>$err.00 || { echo "ERROR: 7: mo=$mo: $msg" >> $err.00; exit 1; }
    cat veg_ratio_max_ini_${mo} >> ${outdir}/veg_ratio_max_ini_mm.grb \
      2>>$out.00            || { echo "ERROR: 8:cat mo=$mo: $msg" >> $err.00; exit 1; }
    mv veg_ratio_max_ini_${mo} tmpdir_post
  done
  rm -f tmpfile1_${year}
  msg="#-- CDO selection of cover_fract from initial file"; echo $msg >> $err.00
  $cdo -f grb selname,cover_fract ${jsbach_inifile} ${outdir}/cover_fract_ini.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 1: $msg" >> $err.00; exit 1; }
  $cdo settime,18:00:00 -ifthen ${slm} -setcode,12 ${outdir}/cover_fract_ini.grb tmpfile_${year} \
    2>>$out.00 1>>$err.00 || { echo "ERROR: 2: $msg" >> $err.00; exit 1; }
  rm -f ${outdir}/cover_fract_ini_mm.grb; touch ${outdir}/cover_fract_ini_mm.grb
  for mo in 01 02 03 04 05 06 07 08 09 10 11 12; do
    $cdo setdate,0001-$mo-15 tmpfile_${year} cover_fract_ini_${mo} \
      2>>$out.00 1>>$err.00 || { echo "ERROR: 3: mo=$mo: $msg" >> $err.00; exit 1; }
    cat cover_fract_ini_${mo} >> ${outdir}/cover_fract_ini_mm.grb \
      2>>$out.00            || { echo "ERROR: 4: cat mo=$mo: $msg" >> $err.00; exit 1; }
    mv cover_fract_ini_${mo} tmpdir_post
  done
  rm -f tmpfile_${year}
  msg="#-- CDO selection of covertype from initial file"; echo $msg >> $err.00
  $cdo selname,cover_type ${jsbach_inifile} covertype.nc \
    2>>$out.00 1>>$err.00 || { echo "ERROR: $msg" >> $err.00; exit 1; }
  msg="#-- CDO selection of land-or-glacier mask"; echo $msg >> $err.00
  $cdo sellevel,1 covertype.nc ${outdir}/ls_msk.nc \
    2>>$out.00 1>>$err.00 || { echo "ERROR: $msg" >> $err.00; exit 1; }    # 1/2=>glac/land
  msg="#-- CDO selection of glacier mask"; echo $msg >> $err.00
  $cdo subc,1 -sellevel,1 covertype.nc ${outdir}/glac_msk.nc \
    2>>$out.00 1>>$err.00 || { echo "ERROR: $msg" >> $err.00; exit 1; }    # 1=>glacier
  msg="#-- CDO selection of c4 mask"; echo $msg >> $err.00
  $cdo subc,20 -sellevel,11 covertype.nc ${outdir}/c4_msk.nc \
    2>>$out.00 1>>$err.00 || { echo "ERROR: $msg" >> $err.00; exit 1; }    # 0=>c3crop
  msg="#-- CDO calculation of residualFrac"; echo $msg >> $err.00
  $cdo -f grb ifthen ${outdir}/ls_msk.nc -selname,glac ${jsbach_inifile}  \
    ${outdir}/residualFrac.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: $msg" >> $err.00; exit 1; }
  $cdo ifthen ${outdir}/glac_msk.nc ${outdir}/cover_fract_ini_mm.grb \
                             ${outdir}/cover_fract_ini_mm_corr.grb \
    2>>$out.00 1>>$err.00 || { echo "ERROR: $msg" >> $err.00; exit 1; }
  mv ${outdir}/cover_fract_ini_mm_corr.grb ${outdir}/cover_fract_ini_mm.grb
  mv -f covertype.nc tmpdir_post
  echo "lpconst_fields end  : $(date)" >> $tmpout
};)&
fi

[[ $jobnum = 1 ]] && wait

#
#-- vegetation type fractions
#
(
#-- setyear of veg_ratio_max and cover_fract from initial file
if [[ ${DoAllVarsP:-true} = true || ${lpsetyear:-false} = true ]]; then

echo "lpsetyear      begin: $(date)" >> $tmpout
msg="#-- CDO set year of veg_ratio_max_ini_mm"; echo $msg >> $err.00
rm -f  veg_ratio_max_ini_${year}_mm.grb
ifile=${outdir}/veg_ratio_max_ini_mm.grb
[[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.00; exit 1; }
$cdo setyear,${year} $ifile veg_ratio_max_ini_${year}_mm.grb  \
  2>>$out.00 1>>$err.00 || { echo "ERROR: cdo: $msg" >> $err.00; exit 1; }
msg="#-- CDO set year of cover_fract_ini_mm"; echo $msg >> $err.00
rm -f cover_fract_ini_${year}_mm.grb 
ifile=${outdir}/cover_fract_ini_mm.grb
[[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.00; exit 1; }
$cdo setyear,${year} $ifile cover_fract_ini_${year}_mm.grb  \
  2>>$out.00 1>>$err.00 || { echo "ERROR: cdo: $msg" >> $err.00; exit 1; }
echo "lpsetyear      end  : $(date)" >> $tmpout 
fi

#-- std JSBACH monthly mean MAIN stream variables
if [[ ${DoAllVarsP:-true} = true || ${lpmainmm:-false} = true ]]; then
 echo "lpmainmm       begin: $(date)" >> $tmpout
 msg="#-- JSBACH main stream aggr=mm: ${cl_POST_jsbach_main_mm}"; echo $msg > $err.01a
 ofile=${expid}_jsbach_main_mm_${year}$suff; rm -f $ofile; touch $ofile
 for mo in $Months; do
  ifile=${expid}_jsbach_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.01a; exit 1; }
  tfile=${expid}_jsbach_main_mm_${year}$mo$suff; rm -f $tfile
  $cdo monmean -selcode,${cl_POST_jsbach_main_mm} $ifile $tfile \
    2>>$out.01a 1>>$err.01a || { echo "ERROR: $msg" >> $err.01a; exit 1; }
  cat $tfile >> $ofile 2>>$out.01a || { echo "ERROR: $msg" >> $err.01a; exit 1; }
  mv $tfile tmpdir_post
 done
 echo "lpmainmm       end  : $(date)" >> $tmpout 
fi

#-- get veg_ratio_max and cover_fract from monthly mean MAIN stream
if [[ ${DoAllVarsP:-true} = true || ${lpsetyear:-false} = true ]]; then
 echo "lpsetyear      begin: $(date)" >> $tmpout
 ifile=${expid}_jsbach_main_mm_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.01b; exit 1; }
 if [[ ${dynveg} = true ]]; then
  msg="#-- selecting mm veg_ratio_max from main stream;" echo $msg > $err.01b
  $cdo selcode,20 $ifile veg_ratio_max_mm_${year} \
    2>>$out.01b 1>>$err.01b || { echo "ERROR: $msg" >> $err.01b; exit 1; }
 fi
 msg="#-- selecting mm cover_fract from main stream"; echo "$msg" >> $err.01b
 ifile=${expid}_jsbach_main_mm_${year}$suff
 $cdo selcode,12 $ifile cover_fract_mm_${year} \
   2>>$out.01b 1>>$err.01b || { echo "ERROR: $msg" >> $err.01b; exit 1; }
 echo "lpsetyear      end  : $(date)" >> $tmpout 
fi

#-- CMIP5 Calculate forest, grass, crop, pasture, shrub, etc.
if [[ ${DoAllVarsP:-true} = true || ${lpvarsFrac:-false} = true ]]; then

 echo "lpvarsFrac     begin: $(date)" >> $tmpout
 msg="#-- CMIP5 Calculate forest, grass, and shrub."; echo "$msg" >> $err.01
 if [[ ${dynveg} = false ]]; then
   VegRatioMax=veg_ratio_max_ini_${year}_mm.grb
   CoverFract=cover_fract_mm_${year}
 else
   VegRatioMax=veg_ratio_max_mm_${year}
   CoverFract=cover_fract_mm_${year}
 fi
 $cdo ifthen  ${outdir}/ls_msk.nc -chcode,20,1 -mul ${VegRatioMax} -vertsum -sellevel,1/4 \
   ${CoverFract} forest_${year} 2>>$out.01 1>>$err.01 || { echo "ERROR: forest:   $msg" >> $err.01; exit 1; }
 $cdo ifthen ${outdir}/ls_msk.nc -chcode,20,2 -mul ${VegRatioMax}  -vertsum -sellevel,7/8 \
   ${CoverFract} grass_${year} 2>>$out.01 1>>$err.01 ||  { echo "ERROR: grass:    $msg" >> $err.01; exit 1; }
 $cdo ifthen ${outdir}/ls_msk.nc -chcode,20,3 -mul ${VegRatioMax}  -vertsum -sellevel,5/6 \
   ${CoverFract} shrub_${year} 2>>$out.01 1>>$err.01 ||  { echo "ERROR: shrub:    $msg" >> $err.01; exit 1; }
 msg="#-- CMIP5 Calculate crop and pasture."; echo "$msg" >> $err.01 
 if [[ ${dynveg} = false ]]; then
   VegRatioMax=veg_ratio_max_ini_${year}_mm.grb
   CoverFract=cover_fract_mm_${year}
 else
   VegRatioMax=veg_ratio_max_mm_${year}
   CoverFract=cover_fract_mm_${year}
 fi
 $cdo ifthen ${outdir}/ls_msk.nc -chcode,20,4 -mul ${VegRatioMax}  -vertsum -sellevel,11 \
   ${CoverFract} crop_${year} 2>>$out.01 1>>$err.01 ||   { echo "ERROR: crop:     $msg" >> $err.01; exit 1; }
 $cdo ifthen ${outdir}/ls_msk.nc -chcode,20,5 -mul ${VegRatioMax}  -vertsum -sellevel,9/10 \
   ${CoverFract} pasture_${year} 2>>$out.01 1>>$err.01 || { echo "ERROR: pasture: $msg" >> $err.01; exit 1; }
 msg="#-- CMIP5 Calculate pft fractions."; echo "$msg" >> $err.01
 if [[ ${dynveg} = false ]]; then
   VegRatioMax=veg_ratio_max_ini_${year}_mm.grb
   CoverFract=cover_fract_mm_${year}
 else
   VegRatioMax=veg_ratio_max_mm_${year}
   CoverFract=cover_fract_mm_${year}
 fi
 $cdo ifthen ${outdir}/ls_msk.nc -setlevel,1 -chcode,12,20 -setmisstoc,0 \
   -ifnotthen ${outdir}/glac_msk.nc -sellevel,1 ${CoverFract} pft1_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft1   : $msg" >> $err.01; exit 1; }
 $cdo ifthen ${outdir}/ls_msk.nc -setlevel,2 -mul ${VegRatioMax} -setmisstoc,0 \
   -ifthen    ${outdir}/glac_msk.nc -sellevel,1 ${CoverFract} pft2_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft2   : $msg" >> $err.01; exit 1; }
 $cdo setlevel,3  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,2  ${CoverFract} pft3_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft3   : $msg" >> $err.01; exit 1; }
 $cdo setlevel,4  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,3  ${CoverFract} pft4_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft4   : $msg" >> $err.01; exit 1; }
 $cdo setlevel,5  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,4  ${CoverFract} pft5_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft5   : $msg" >> $err.01; exit 1; }
 $cdo setlevel,6  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,5  ${CoverFract} pft10_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft10  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,7  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,6  ${CoverFract} pft11_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft11  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,8  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,7  ${CoverFract} pft12_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft12  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,9  -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,8  ${CoverFract} pft13_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft13  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,10 -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,9  ${CoverFract} pft15_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft15  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,11 -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -sellevel,10 ${CoverFract} pft16_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft16  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,12 -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -setmisstoc,0 \
   -ifnotthen ${outdir}/c4_msk.nc -sellevel,11 ${CoverFract} pft20_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft20  : $msg" >> $err.01; exit 1; }
 $cdo setlevel,13 -ifthen ${outdir}/ls_msk.nc -mul ${VegRatioMax} -setmisstoc,0 \
   -ifthen    ${outdir}/c4_msk.nc -sellevel,11 ${CoverFract} pft21_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: pft21  : $msg" >> $err.01; exit 1; }
 rm -f ${expid}_Lmon_landCoverFrac_${year}.nc LandCoverFrac_${year}
 $cdo merge pft1_${year} pft2_${year} pft3_${year} pft4_${year} pft5_${year} pft10_${year} pft11_${year} \
   pft12_${year} pft13_${year} pft15_${year} pft16_${year} pft20_${year} pft21_${year} LandCoverFrac_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: merge:$msg" >> $err.01; exit 1; }
 $cdo chcode,20,12 LandCoverFrac_${year} ${expid}_Lmon_landCoverFrac_${year}.nc \
   2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
 mv -f LandCoverFrac_${year} tmpdir_post
 msg="#-- CMIP5 baresoil and c3/4plants."; echo "$msg" >> $err.01
 if [[ ${dynveg} = true ]]; then
   VegRatioMax=veg_ratio_max_mm_${year}
 else
   VegRatioMax=veg_ratio_max_ini_${year}_mm.grb
 fi
 $cdo ifthen ${outdir}/ls_msk.nc pft1_${year} glacier_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: glacier: $msg" >> $err.01; exit 1; }
 $cdo setcode,6 -sub -addc,1 -mulc,-1 ${VegRatioMax} glacier_${year} baresoil_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: baresoil: $msg" >> $err.01; exit 1; }
 $cdo setcode,7 -add forest_${year} -add shrub_${year} -add pft12_${year} \
   -add pft15_${year} pft20_${year} c3plants_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: c3plant: $msg" >> $err.01; exit 1; }
 $cdo setcode,8 -add pft13_${year} -add pft16_${year} pft21_${year} c4plants_${year} \
   2>>$out.01 1>>$err.01 || { echo "ERROR: c4plant: $msg" >> $err.01; exit 1; }
 mv -f pft*_${year} glacier_${year} tmpdir_post
 msg="#-- CMIP5 merge fractional vars into one file."; echo "$msg" >> $err.01
 rm -f ${expid}_Lmon_varsFrac_${year}.nc 
 $cdo merge forest_${year} grass_${year} shrub_${year} crop_${year} pasture_${year} \
   baresoil_${year} c3plants_${year} c4plants_${year} ${expid}_Lmon_varsFrac_${year}.nc \
   2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
 mv -f forest_${year} grass_${year} shrub_${year} crop_${year} pasture_${year} \
   baresoil_${year} c3plants_${year} c4plants_${year} tmpdir_post
 if [[ ${dynveg} = true ]]; then
   VegRatioMax=veg_ratio_max_mm_${year}
   CoverFract=cover_fract_mm_${year}
 else
   VegRatioMax=veg_ratio_max_ini_${year}_mm.grb
   CoverFract=cover_fract_mm_${year}
 fi
 if [[ ${code107:-wrong} = wrong ]]; then
   msg="#-- CMIP5 calculate leaf area index."; echo "$msg" >> $err.01
   $cdo selcode,116 ${expid}_jsbach_main_mm_${year}$suff veg_fract_correction_${year} \
     2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   $cdo selcode,107 ${expid}_jsbach_main_mm_${year}$suff lai_${year} \
     2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   $cdo chcode,20,107 -ifthen ${slm} -mul ${VegRatioMax} -vertsum -mul ${CoverFract} \
     -mul lai_${year} veg_fract_correction_${year} ${expid}_jsbach_land_Lmon_lai_agrid_${year}$suff \
     2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   mv -f veg_fract_correction_${year} lai_${year} tmpdir_post
 else
   msg="#-- CMIP5 get leaf area index."; echo "$msg" >> $err.01
   $cdo selcode,107 ${expid}_jsbach_land_mm_${year}$suff  \
     ${expid}_jsbach_land_Lmon_lai_agrid_${year}$suff     \
     2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
 fi
 echo "lpvarsFrac     end  : $(date)" >> $tmpout
fi 
)&

#-- std JSBACH monthly LAND stream variables
if [[ ${DoAllVarsP:-true} = true || ${lpland1mon:-false} = true ]]; then

(echo "lpland1mon     begin: $(date)" >> $tmpout
 msg="#-- std JSBACH land stream aggr=mm: ${cl_POST_jsbach_land_mm}"; echo $msg > $err.02
 ofile=${expid}_jsbach_land_mm_${year}$suff; rm -f $ofile; touch $ofile
 for mo in $Months; do
  ifile=${expid}_jsbach_land_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02; exit 1; }
  tfile=${expid}_jsbach_land_mm_${year}$mo$suff; rm -f $tfile
  $cdo monmean -selcode,${cl_POST_jsbach_land_mm} $ifile $tfile \
    2>>$out.02 1>>$err.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
  cat $tfile >> $ofile 2>>$out.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
  mv $tfile tmpdir_post
 done
echo "lpland1mon     end  : $(date)" >> $tmpout
)&
fi

#-- std JSBACH monthly mean VEG stream variables
if [[ ${DoAllVarsP:-true} = true || ${lpveg1mon:-false} = true ]]; then

(echo "lpveg1mon      begin: $(date)" >> $tmpout
 msg="#-- std JSBACH veg stream aggr=mm: ${cl_POST_jsbach_veg_mm}"; echo $msg > $err.03
 ofile=${expid}_jsbach_veg_mm_${year}$suff; rm -f $ofile; touch $ofile
 for mo in $Months; do
  ifile=${expid}_jsbach_veg_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
  tfile=${expid}_jsbach_veg_mm_${year}$mo$suff; rm -f $tfile
  $cdo monmean -selcode,${cl_POST_jsbach_veg_mm} $ifile $tfile \
    2>>$out.03 1>>$err.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
  cat $tfile >> $ofile 2>>$out.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
  mv $tfile tmpdir_post
 done
echo "lpveg1mon      end  : $(date)" >> $tmpout
)&
fi

#-- std JSBACH monthly SURF stream variables
if [[ ${DoAllVarsP:-true} = true || ${lpsurfmon:-false} = true ]]; then

(echo "lpsurfmon      begin: $(date)" >> $tmpout
 msg="#-- std JSBACH surf stream aggr=mm: ${cl_POST_jsbach_surf_mm}"; echo $msg > $err.04
 ofile=${expid}_jsbach_surf_mm_${year}$suff; rm -f $ofile; touch $ofile
 for mo in $Months; do
  ifile=${expid}_jsbach_surf_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.04; exit 1; }
  tfile=${expid}_jsbach_surf_mm_${year}$mo$suff; rm -f $tfile
  $cdo monmean -selcode,${cl_POST_jsbach_surf_mm} $ifile $tfile \
    2>>$out.04 1>>$err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
  cat $tfile >> $ofile 2>>$out.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
  mv $tfile tmpdir_post
 done
echo "lpsurfmon      end  : $(date)" >> $tmpout
)&
fi 

#-- monthly mean: land stream codes for CMIP5 processing (agrid and sdepth)
if [[ ${DoAllVarsP:-true} = true || ${lpland2mon:-false} = true ]]; then

(ofile=${expid}_jsbach_land_Lmon_${year}$suff; rm -f $ofile; touch $ofile
 echo "lpland2mon     begin: $(date)" >> $tmpout
 msg="#-- CMIP5 Select/Monmean land: ${cl_CMOR_jsbach_land_mm},68"; echo $msg > $err.05
 for mo in $Months; do
  ifile=${expid}_jsbach_land_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.05; exit 1; }
  tfile=${expid}_jsbach_land_Lmon${year}$mo$suff
  $cdo monmean -selcode,${cl_CMOR_jsbach_land_mm},68,107 $ifile $tfile \
    2>>$out.05 1>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
  cat $tfile >> $ofile 2>>$out.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
  mv $tfile tmpdir_post
 done
 $cdo selcode,${cl_CMOR_jsbach_land_mm} $ofile ${expid}_jsbach_land_Lmon_agrid_${year}$suff \
    2>>$out.05 1>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
 $cdo selcode,68 $ofile ${expid}_jsbach_land_Lmon_sdepth_${year}$suff   \
    2>>$out.05 1>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
echo "lpland2mon     end  : $(date)" >> $tmpout
)&
fi 

#-- daily mean: land stream codes for CMIP5 processing (agrid)
if [[ ${DoAllVarsP:-true} = true || ${lplandday:-false} = true ]]; then

(ofile=${expid}_jsbach_land_day_agrid_${year}$suff; rm -f $ofile; touch $ofile
 echo "lplandday      begin: $(date)" >> $tmpout
 msg="#-- CMIP5 Select/Daily-average: Snow area fraction: "; echo $msg > $err.06
 for mo in $Months; do
  ifile=${expid}_jsbach_land_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.06; exit 1; }
  tfile=${expid}_jsbach_land_day_agrid_${year}$mo$suff
  $cdo daymean -selcode,60 $ifile $tfile \
    2>>$out.06 1>>$err.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
  cat $tfile >> $ofile 2>>$out.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
  mv $tfile tmpdir_post
 done
echo "lplandday      end  : $(date)" >> $tmpout
)&

fi

wait
#-- selecting monthly veg code for CMOR processing
if [[ ${DoAllVarsP:-true} = true || ${lpveg2mon:-false} = true ]]; then

(ofile=${expid}_jsbach_veg_Lmon_agrid_${year}$suff; rm -f $ofile; touch $ofile
echo "lpveg2mon      begin: $(date)" >> $tmpout
 msg="#-- CMIP5 Select veg variables ${cl_CMOR_jsbach_veg}."; echo $msg > $err.07
 for mo in $Months; do
  ifile=${expid}_jsbach_veg_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07; exit 1; }
  tfile=${expid}_jsbach_veg_Lmon_agrid_${year}$mo$suff; rm -f $tfile
  $cdo monmean -vertsum -selcode,${cl_CMOR_jsbach_veg} $ifile $tfile \
    2>>$out.07 1>>$err.07 || { echo "ERROR: select: $msg" >> $err.07; exit 1; }
  cat $tfile >> $ofile \
    2>>$out.07            || { echo "ERROR: cat:    $msg" >> $err.07; exit 1; }
  mv $tfile tmpdir_post
 done
echo "lpveg2mon      end  : $(date)" >> $tmpout
)&
fi

#-- burnt area 
if [[ ${DoAllVarsP:-true} = true || ${lpburntArea:-false} = true ]]; then

[[ "${ocemod}" = "" || ${dynveg_feedback} = false ]] || {
(ifile=${expid}_jsbach_veg_mm_${year}$suff
echo "lpburntArea    begin: $(date)" >> $tmpout
 msg="#-- CMIP5 burnt area; varying."; echo "$msg" >> $err.08
 VegRatioMax=veg_ratio_max_mm_${year}
 CoverFract=cover_fract_mm_${year}
 $cdo -r ifthen $outdir/ls_msk.nc -mul ${VegRatioMax} -muldpm \
   -mul -vertsum -selcode,31 $ifile -vertsum -mul ${CoverFract} \
   -div -selcode,32 $ifile -selcode,31 $ifile \
   input_cmor/${expid}_Lmon_burntArea_${year}$suff \
   2>>$out.08 1>>$err.08 || { echo "ERROR: burnt:$msg" >> $err.08; exit 1; }
echo "lpburntArea    end  : $(date)" >> $tmpout
)&
}
fi

#
#-- check for POST processing errors in JSBACH output processing
#
wait
rm -f ERROR.ctl
grep -v "Confusing string" ${err}.*    > ${err}.tmp || touch ${err}.tmp    
grep "ERROR:"              ${err}.tmp  > ERROR.ctl  || touch ERROR.ctl 
grep "Some other string  " ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when POST processing JSBACH output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl; rm -f ${err}.tmp
  POST_status=${POST_status:-""}"jsbach:post"; exit 1
else
  printf "\n   |- No problems detected when POST processing JSBACH output.\n"
  rm -f ERROR.ctl ${err}.tmp
  for no in 00 01 01a 01b 02 03 04 05 06 07 08; do
    cat $err.${no} >> $err 2>/dev/null || echo No file 1>/dev/null
    cat $out.${no} >> $out 2>/dev/null || echo No file 1>/dev/null
    rm -f $err.${no} $out.${no}
  done
  printf "\n   |- Moving input for CMOR processing into directory input_cmor.\n"
  mv -f veg_ratio_max_* cover_fract_* tmpdir_post 2>/dev/null || true
  for table in Lmon day; do
    mv -f ${expid}_*${table}*_${year}* input_cmor 2>/dev/null || true
  done
fi

printf "\n%s\n\n" "#-- JSBACH: End of POST loadbalance at $(date)" >> $tmpout
printf "\n%s\n"   "#-- End of POST processing for JSBACH  at $(date)" >> $err

fi # post_proc_jsbach=yes

#
#################################################################################

#################################################################################
#
#-- CMOR rewriting of JSBACH output
#   -LR: ca. 20 sec

if [[ $cmor_proc_jsbach = yes ]]; then

cp ${outdir}/CMORCONST.txt .

tmpout=tmpdir_post/load_balance_cmor.txt; rm -f $tmpout
printf "\n#-- JSBACH: Begin of CMOR loadbalance $(date)\n\n"  > $tmpout

err=tmpdir_post/${expid}.${srfmod}.cmor.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.${srfmod}.cmor.${enddate}.out; rm -f ${out}*
printf "\n#-- Start of CMOR rewriting of JSBACH output at $(date)\n\n" > $err.00

#
#-- CMOR processing of variables requested at the start of each experiment
#   table fx (from JSBACH initial file) and residualFrac

([[ $jobnum = 1 ]] && {
if [[ ${DoAllVarsC:-true} = true || ${lcconst_fields:-false} = true ]]; then
echo "lcconst_fields begin: $(date)" >> $tmpout

([[ -f ${outdir}/fx129.grb ]] || { 

[[ -f ${outdir}/fx.grb ]] && { rm ${outdir}/fx.grb; }
  $cdo -f grb selname,slm,glac,maxmoist ${jsbach_inifile} ${outdir}/jsbach/tmpdir_post/fxl.grb \
    2>>$out.01 1>>$err.01 || { echo "ERROR: 1a: $msg" >> $err.01; exit 1; }
  orogfile=${expid}_echam6_echam_${year}01${suff} 
  $cdo -f grb setcode,7 -divc,9.80665 -seltimestep,1 -selcode,129 \
    ${outdir}/echam6/${orogfile} ${outdir}/jsbach/tmpdir_post/fx129.grb \
    2>>$out.01 1>>$err.01 || { echo "ERROR: 1b: $msg" >> $err.01; exit 1; }
  $cdo -f grb merge ${outdir}/jsbach/tmpdir_post/fxl.grb \
    ${outdir}/jsbach/tmpdir_post/fx129.grb ${outdir}/fx.grb\
    2>>$out.01 1>>$err.01 || { echo "ERROR: 1c: $msg" >> $err.01; exit 1; }
})

  table=fx; shape=agrid; realm=atmos; freq=fx; vars=orog,sftlf
  msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.01
    ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
    &CMORCTL
    INPUT_FILENAME = "../fx.grb"
    CHUNK_RANGE    = ""
    TABLE_NAME     = "${table}"
    REALM          = "${realm}"
    REC_NUM        =  1
    OUT_FLAG       = "replace" 
    SHAPE          = "${shape}"
    ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  ="sftlf  ","%         ","    ","1,004        "
   /
EOF
  orog_comm="This is code 129 ( surface geopotential in m2 s-2 ) devided by g=9.80665 m s-2."
  orog_comm="${orog_comm} ;Due to the spectral nature of ECHAM6s dynamical core, the values over ocean are not zero."
  
  msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.01
    ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
    &CMORCTL
    INPUT_FILENAME = "../fx.grb"
    CHUNK_RANGE    = ""
    TABLE_NAME     = "${table}"
    REALM          = "${realm}"
    REC_NUM        =  1
    OUT_FLAG       = "replace" 
    SHAPE          = "${shape}"
    VAR_COMMENT    = "${orog_comm}"
    ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  ="orog   ","m         ","    ","1,007        "
   /
EOF


  realm=land; vars=sftgif
  msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.01
    ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
    &CMORCTL
    INPUT_FILENAME = "../fx.grb"
    CHUNK_RANGE    = ""
    TABLE_NAME     = "${table}"
    REALM          = "${realm}"
    REC_NUM        =  1
    OUT_FLAG       = "replace" 
    SHAPE          = "${shape}"
    ANZVARS        =  1
   / 
   &CMORVARS
   VARTABIN(:,1)  ="sftgif ","%         ","    ","1,009        "
   /
EOF
  realm=land; vars=mrsofc
  msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.01
    ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
    &CMORCTL
    INPUT_FILENAME = "../mrsofc.grb"
    CHUNK_RANGE    = ""
    TABLE_NAME     = "${table}"
    REALM          = "${realm}"
    REC_NUM        =  1
    OUT_FLAG       = "replace" 
    SHAPE          = "${shape}"
    ANZVARS        =  1
   / 
   &CMORVARS
   VARTABIN(:,1)  ="mrsofc ","kg m-2    ","    ","1,011        "
   /
EOF
  $cdo setyear,${year} ${outdir}/residualFrac.grb residualFrac_${year}.grb \
    2>>$out.01 1>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
  table=Lmon; realm=land; freq=mon; vars=residualFrac
  msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.01
  c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
  [[ $outflag = replace ]] || { 
    c5_find_chunk ${c5archdir} $expName $member \
      $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
    echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.01; }
    ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
    &CMORCTL
    INPUT_FILENAME = "residualFrac_${year}.grb"
    CHUNK_RANGE    = ""
    TABLE_NAME     = "${table}"
    REALM          = "${realm}"
    REC_NUM        =  1
    OUT_FLAG       = "replace"
    SHAPE          = "${shape}"
    ANZVARS        =  1
    VAR_COMMENT    = "glacier coverage (0 or 100%), invariable"
   /
   &CMORVARS
    VARTABIN(:,1)  ="residualFrac","%         ","    ","1,009        "
  /
EOF
rm residualFrac_${year}.grb
echo "lcconst_fields end  : $(date)" >> $tmpout
fi
})&

#
#-- CMOR processing of variables always requested (no call of c5_request)
#

#-- LImon, agrid, land ( snc )
if [[ ${DoAllVarsC:-true} = true || ${lcsnc:-false} = true ]]; then

(table=LImon; shape=agrid; realm=landIce; freq=mon; vars=snc
echo "lcsnc          begin: $(date)" >> $tmpout
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.02
  ifile=input_cmor/${expid}_jsbach_land_Lmon_agrid_${year}$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02; exit 1; }
  c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
  [[ "$outflag" = replace ]] || { 
    c5_find_chunk $c5archdir $expName $member \
      $freq $realm $vars ${prevyear}12 $res_mod $table chunk_range chk_msg
    echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.02; }
    ${cmor} << EOF 1>>$out.02 2>>$err.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
    &CMORCTL
    INPUT_FILENAME = "${ifile}"
    CHUNK_RANGE    = "${chunk_range}"
    TABLE_NAME     = "${table}"
    REALM          = "${realm}"
    REC_NUM        =  ${RecMo}
    OUT_FLAG       = "${outflag}" 
    SHAPE          = "${shape}"
    ANZVARS        = 1
   /
   &CMORVARS
   VARTABIN(:,1) = "snc","%"     ,"    ","1,60        "
   /
EOF
echo "lcsnc          end  : $(date)" >> $tmpout
)&
fi

#-- table Lmon, agrid, land (lai)
if [[ ${DoAllVarsC:-true} = true || ${lclai:-false} = true ]]; then

(table=Lmon; shape=agrid; realm=land; freq=mon; vars=lai
echo "lclai          begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03
 ifile=input_cmor/${expid}_jsbach_land_Lmon_lai_agrid_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03; }
   ${cmor} << EOF 1>>$out.03 2>>$err.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
  /
  &CMORVARS
  VARTABIN(:,1)  ="lai","1","","1,107"
  /
EOF
echo "lclai          end  : $(date)" >> $tmpout
)&
fi

#-- table Lmon, agrid, land (tran)
if [[ ${DoAllVarsC:-true} = true || ${lctran:-false} = true ]]; then

(table=Lmon; shape=agrid; realm=land; freq=mon; vars=tran
echo "lctran         begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.04
 ifile=input_cmor/${expid}_jsbach_land_Lmon_agrid_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.04; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.04; }
   ${cmor} << EOF 1>>$out.04 2>>$err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
  /
  &CMORVARS
  VARTABIN(:,1)  ="tran   ","kg m-2 s-1","down","1,076        "
  /
EOF
echo "lctran         end  : $(date)" >> $tmpout
)&
fi


#
#-- table Lmon, agrid, land ( gpp ra npp )
#
if [[ ${DoAllVarsC:-true} = true || ${lcgpp:-false} = true ]]; then

(vars=gpp,ra,npp
 table=Lmon; shape=agrid; realm=land; freq=mon
echo "lcgpp          begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.05a
 ifile=input_cmor/${expid}_jsbach_veg_Lmon_agrid_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.05a; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.05a; }
   ${cmor} << EOF 1>>$out.05a 2>>$err.05a || { echo "ERROR: $msg" >> $err.05a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  3
  /
  &CMORVARS
  VARTABIN(:,1)   ="gpp         ","kg m-2 s-1","down","1,173        "
  VARTABIN(:,2)   ="ra          ","kg m-2 s-1","up  ","2,173,171    "
  VARTABIN(:,3)   ="npp         ","kg m-2 s-1","down","1,171        "
  /
EOF
echo "lcgpp          end  : $(date)" >> $tmpout
)&
fi


#
#-- table Lmon, agrid, land ( cVeg cLitter cSoil rh fVegLitter )
#
if [[ ${DoAllVarsC:-true} = true || ${lccveg:-false} = true ]]; then

[[ "${ocemod}" = "" || "${res_mod}" = "P" ]] || {
(vars=cVeg,cLitter,cSoil,rh,fVegLitter
 table=Lmon; shape=agrid; realm=land; freq=mon
echo "lccveg         begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.05b
 ifile=input_cmor/${expid}_jsbach_veg_Lmon_agrid_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.05b; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.05b; }
   ${cmor} << EOF 1>>$out.05b 2>>$err.05b || { echo "ERROR: $msg" >> $err.05b; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  5
  /
  &CMORVARS
  VARTABIN(:,1)   ="cVeg        ","kg m-2    ","    ","3,160,161,162"
  VARTABIN(:,2)   ="cLitter     ","kg m-2    ","    ","3,159,163,179"
  VARTABIN(:,3)   ="cSoil       ","kg m-2    ","    ","1,164        "
  VARTABIN(:,4)   ="rh          ","kg m-2 s-1","up  ","1,170        "
  VARTABIN(:,5)   ="fVegLitter  ","kg m-2 s-1","    ","1,175        "
  /
EOF
echo "lccveg         end  : $(date)" >> $tmpout
)&
}
fi


#-- table Lmon, sdepth, land ( tsl )
if [[ ${DoAllVarsC:-true} = true || ${lctsl:-false} = true ]]; then

(table=Lmon; shape=sdepth; realm=land; freq=mon; vars=tsl
echo "lctsl          begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.06
 ifile=input_cmor/${expid}_jsbach_land_Lmon_sdepth_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile" > $err.06; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.06; }
   ${cmor} << EOF 1>>$out.06 2>>$err.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
  /
  &CMORVARS
   VARTABIN(:,1)  ="tsl    ","K         ","    ","1,068        "
  /
EOF
echo "lctsl          end  : $(date)" >> $tmpout
)&
fi

#-- table Lmon, vegtype ( landCoverFrac )
if [[ ${DoAllVarsC:-true} = true || ${lclandcover:-false} = true ]]; then

(table=Lmon; shape=vegtype; realm=land; freq=mon; vars=landCoverFrac
echo "lclandcover    begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07
 ifile=input_cmor/${expid}_Lmon_landCoverFrac_${year}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
  c5_find_chunk ${c5archdir} $expName $member \
    $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
  echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.07; }
  ${cmor} << EOF 1>>$out.07 2>>$err.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
  &CMORCTL
  INPUT_FILENAME = "${ifile}"
  CHUNK_RANGE    = "${chunk_range}"
  TABLE_NAME     = "${table}"
  REALM          = "${realm}"
  REC_NUM        =  ${RecMo}
  OUT_FLAG       = "${outflag}" 
  SHAPE          = "${shape}"
  ANZVARS        =  1
 /
 &CMORVARS
 VARTABIN(:,1)  ="landCoverFrac","%         ","    ","1,012        "
 /
EOF
echo "lclandcover    end  : $(date)" >> $tmpout
)&
fi

#-- Lmon, agrid, land ( baresoilFrac )
#
if [[ ${DoAllVarsC:-true} = true || ${lcbaresoil:-false} = true ]]; then

(table=Lmon; shape=agrid; realm=land; freq=mon; vars=baresoilFrac
echo "lcbaresoil     begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.08
 ifile=input_cmor/${expid}_Lmon_varsFrac_${year}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.08; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.08; }
   ${cmor} << EOF 1>>$out.08 2>>$err.08 || { echo "ERROR: $msg" >> $err.08; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
  /
  &CMORVARS
   VARTABIN(:,1)  ="baresoilFrac","%         ","    ","1,006        "
 /
EOF
echo "lcbaresoil     end  : $(date)" >> $tmpout
)&
fi

#-- Lmon, agrid, land ( cropFrac pastureFrac )
#
if [[ ${DoAllVarsC:-true} = true || ${lccrop:-false} = true ]]; then

(vars=cropFrac,pastureFrac
 table=Lmon; shape=agrid; realm=land; freq=mon
 echo "lccrop         begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.09
 ifile=input_cmor/${expid}_Lmon_varsFrac_${year}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.09; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.09; }
   ${cmor} << EOF 1>>$out.09 2>>$err.09 || { echo "ERROR: $msg" >> $err.09; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2
   /
   &CMORVARS
   VARTABIN(:,1)  ="cropFrac    ","%         ","    ","1,004        "
   VARTABIN(:,2)  ="pastureFrac ","%         ","    ","1,005        "
   /
EOF
echo "lccrop         end  : $(date)" >> $tmpout
)&
fi

#
#-- Lmon, agrid, land ( treeFrac grassFrac shrubFrac c3PftFrac c4PftFrac )
#
if [[ ${DoAllVarsC:-true} = true || ${lctree:-false} = true ]]; then

(vars=treeFrac,grassFrac,shrubFrac,c3PftFrac,c4PftFrac
 table=Lmon; shape=agrid; realm=land; freq=mon
echo "lctree         begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.10
 ifile=input_cmor/${expid}_Lmon_varsFrac_${year}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.10; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.10; }
   ${cmor} << EOF 1>>$out.10 2>>$err.10 || { echo "ERROR: $msg" >> $err.10; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  5
   /
   &CMORVARS
   VARTABIN(:,1)  ="treeFrac    ","%         ","    ","1,001        "
   VARTABIN(:,2)  ="grassFrac   ","%         ","    ","1,002        "
   VARTABIN(:,3)  ="shrubFrac   ","%         ","    ","1,003        "
   VARTABIN(:,4)  ="c3PftFrac   ","%         ","    ","1,007        "
   VARTABIN(:,5)  ="c4PftFrac   ","%         ","    ","1,008        "
   /
EOF
echo "lctree         end  : $(date)" >> $tmpout
)&
fi

#-- Lmon, agrid, land ( burntArea )
if [[ ${DoAllVarsC:-true} = true || ${lcburntArea:-false} = true ]]; then

[[ "${ocemod}" = "" || ${dynveg_feedback} = false ]] || {
(table=Lmon; shape=agrid; realm=land; freq=mon; vars=burntArea
echo "lcburntArea    begin: $(date)" >> $tmpout
 msg="#-- CMOR: $table $shape $realm $vars, ... "; echo $msg > $err.11
 ifile=input_cmor/${expid}_Lmon_burntArea_${year}$suff 
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.11; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
 c5_find_chunk ${c5archdir} $expName $member \
   $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
 echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.11; }
 ${cmor} << EOF 1>>$out.11 2>>$err.11 || { echo "ERROR: $msg" >> $err.11; exit 1; }
 &CMORCTL
 INPUT_FILENAME = "${ifile}"
 CHUNK_RANGE    = "${chunk_range}"
 TABLE_NAME     = "${table}"
 REALM          = "${realm}"
 REC_NUM        =  ${RecMo}
 OUT_FLAG       = "${outflag}" 
 SHAPE          = "${shape}"
 ANZVARS        =  1
 /
 &CMORVARS
  VARTABIN(:,1)  ="burntArea","%","","1,020"
 /
EOF
echo "lcburntArea    end  : $(date)" >> $tmpout
)&
}
fi

#
#-- CMOR processing of variables not always requested (need to call c5_request)
#

#-- day table 2, agrid, land ( snc )
if [[ ${DoAllVarsC:-true} = true || ${lcsnc:-false} = true ]]; then

(table=day; shape=agrid; realm=landIce; freq=day; vars=snc
echo "lcsnc          begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_jsbach_land_day_agrid_${year}$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.12; exit 1; }
 c5_request $year $expName $realisation $table $shape requested  ${res_mod}
 [[ "$requested" = no ]] || {
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.12
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ "$outflag" = replace ]] || { 
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.12; }
     ${cmor} << EOF 1>>$out.12 2>>$err.12 || { echo "ERROR: $msg" >> $err.12; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 1
     /
     &CMORVARS
     VARTABIN(:,1) = "snc","%"     ,"    ","1,60        "
     /
EOF
echo "lcsnc          end  : $(date)" >> $tmpout
})&
fi

#
#-- check for CMOR errors in JSBACH output processing
#

wait
rm -f ERROR.ctl
grep "ERROR:"                ${err}.*  > ERROR.ctl || touch ERROR.ctl 
grep "Error: Could not find" ${err}.* >> ERROR.ctl || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when CMOR processing JSBACH output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl
  POST_status=${POST_status:-""}"jsbach:cmor"; exit 1
else
  printf "\n   |- No problems detected when CMOR processing JSBACH output.\n"
  touch $err.tmp
  for no in 00 01 02 03 04 05a 05b 06 07 08 09 10 11 12; do
    cat $err.${no} >> $err.tmp 2>/dev/null || echo No file 1>/dev/null
    cat $out.${no} >> $out     2>/dev/null || echo No file 1>/dev/null
    rm -f $err.${no} $out.${no}
  done
  grep -v "Definition of " ${err}.tmp > ${err} || touch ${err}   
  rm -f ERROR.ctl CMORCONST.txt ${err}.tmp
  #-- grep CMOR value threshold messages/warnings
  thresh=tmpdir_post/${expid}.${srfmod}.cmor-threshold.${year}.txt
  grep "Warning: Invalid value(s) detected " $err > ${thresh} || status=$?
  if [[ $status = 0 ]] ; then
    printf "\n        |- No CMOR-threshold violations in JSBACH output.\n"
    rm -f $thresh
  else  
    printf "\n        |- WARNING: CMOR-threshold violations in JSBACH output!\n"
  fi
fi

printf " \n#-- JSBACH: End of CMOR loadbalance at $(date)\n\n"    >> $tmpout
printf " \n#-- End of CMOR rewriting of JSBACH output at $(date)\n"  >> $err
fi
#
#################################################################################

#################################################################################
#
#  Post processing of ECHAM output diagnostic files
#
#################################################################################

cd ${outdir}/${atmmod}
[[ -d tmpdir_post ]] || { mkdir tmpdir_post; [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx tmpdir_post || true; }; }
[[ -d input_cmor  ]] || { mkdir input_cmor;  [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx input_cmor  || true; }; }

#-- regional climate model forcing request status: rcm_requested=yes/no

c5_request $year $expName $realisation 6hrLev agrid rcm_requested ${res_mod} 
[[ $rcm_requested = yes && ! -d ${outdir}/rcm ]] && mkdir ${outdir}/rcm 

fmmsg="ERROR: Missing input file:"

suff=.grb
[[ "${atm_out_ztype}" = "1" ]] && suff=.sz

d6hr=$(expr $dt_write_atm \* 3600 / $nadt )

#################################################################################
#
#-- afterburner/cdo processing:
#            -LR : ca. 10 min

if [[ $post_proc_echam = yes ]]; then

err=tmpdir_post/${expid}.${atmmod}.post.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.${atmmod}.post.${enddate}.out; rm -f ${out}*
printf "\n#-- Start POST processing of ECHAM data at $(date)\n\n" > $err.00

tmpout=tmpdir_post/load_balance_post.txt; rm -f $tmpout
printf "\n#-- ECHAM: Begin of POST loadbalance at $(date)\n\n" > $tmpout

 
#
#-- std ECHAM6 post processing
#
if [[ ${DoAllVarsP:-true} = true || ${appost:-false} = true ]]; then

(echo "type30       begin: $(date)" >> $tmpout
 msg="#-- std ECHAM type30: ${cl_POST_echam_ATM_mm_type30}"; echo $msg > $err.01 
 ofile=${expid}_${atmmod}_ATM_mm_type30_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.01; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.01 2>> $err.01 \
    << EOF || { echo "ERROR: $msg" >> $err.01; exit 1; }
    &SELECT CODE=${cl_POST_echam_ATM_mm_type30},LEVEL=${levels_pressure_echam6_ATM},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=30 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
 echo "type30       end  : $(date)" >> $tmpout
)&

(echo "type70       begin: $(date)" >> $tmpout
 msg="#-- std ECHAM type70: ${cl_POST_echam_ATM_mm_type70}"; echo $msg > $err.02
 ofile=${expid}_${atmmod}_ATM_mm_type70_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.02 2>> $err.02 \
    << EOF || { echo "ERROR: $msg" >> $err.02; exit 1; }
    &SELECT CODE=${cl_POST_echam_ATM_mm_type70},LEVEL=${levels_pressure_echam6_ATM},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=70 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
 echo "type70       end  : $(date)" >> $tmpout
)&

(echo "LOG          begin: $(date)" >> $tmpout
 msg="#-- std ECHAM LOG: ${cl_POST_echam_LOG_mm}"; echo $msg > $err.21
 ofile=${expid}_${atmmod}_LOG_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.21; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.21 2>> $err.21 \
    << EOF || { echo "ERROR: $msg" >> $err.21; exit 1; }
    &SELECT CODE=${cl_POST_echam_LOG_mm},LEVEL=${plevlog},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=30 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
 echo "LOG          end  : $(date)" >> $tmpout
 )&

(echo "QBO          begin: $(date)" >> $tmpout
 msg="#-- std ECHAM QBO: ${cl_POST_echam_QBO_mm}"; echo $msg > $err.22
 ofile=${expid}_${atmmod}_QBO_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.22; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.22 2>> $err.22 \
    << EOF || { echo "ERROR: $msg" >> $err.22; exit 1; }
    &SELECT CODE=${cl_POST_echam_QBO_mm},LEVEL=${plevlog},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=30 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
 echo "QBO          end  : $(date)" >> $tmpout
 )&

(echo "BOT          begin: $(date)" >> $tmpout
 msg="#-- std ECHAM (BOT_mm): ${cl_POST_echam_BOT_mm}"; echo $msg > $err.03
 ofile=${expid}_${atmmod}_BOT_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.03 2>> $err.03 \
    << EOF || { echo "ERROR: $msg" >> $err.03; exit 1; }
    &SELECT CODE=${cl_POST_echam_BOT_mm},FORMAT=1,INTERVAL=0,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
 echo "BOT          end  : $(date)" >> $tmpout
)&

fi

if [[ ${DoAllVarsP:-true} = true || ${apco2:-false} = true ]]; then

(msg="#-- std ECHAM co2 aggr=dm: ${cl_POST_echam_co2_dm}"; echo $msg > $err.04
 echo "apco2        begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_co2_dm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  $cdo  dayavg -selcode,${cl_POST_echam_co2_dm} \
    ${expid}_echam6_co2_${year}$mo$suff $ofile$mo$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
 msg="#-- std ECHAM co2 aggr=mm: ${cl_POST_echam_co2_mm}"; echo $msg >> $err.04
 ofile=${expid}_echam6_co2_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  $cdo  monavg -selcode,${cl_POST_echam_co2_mm}	\
    ${expid}_echam6_co2_${year}$mo$suff $ofile$mo$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done

 msg="#-- select code 5 (fco2nat) from ECHAM co2 mm file"; echo $msg >> $err.04
 ofile=input_cmor/${expid}_echam6_fco2nat_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 $cdo mulc,0.272912 -selcode,5 ${expid}_echam6_co2_mm_${year}$suff $ofile$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 

 msg="#-- select code 26 (fFire) from ECHAM co2 mm file"; echo $msg >> $err.04
 ofile=input_cmor/${expid}_echam6_fFire_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 $cdo mulc,0.272912 -selcode,26 ${expid}_echam6_co2_mm_${year}$suff $ofile$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 

 msg="#-- select code 24 (fLuc) from ECHAM co2 mm file"; echo $msg >> $err.04
 ofile=input_cmor/${expid}_echam6_fLuc_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 $cdo mulc,0.272912 -selcode,24 ${expid}_echam6_co2_mm_${year}$suff $ofile$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 

 msg="#-- select code 25 from ECHAM co2 mm file"; echo $msg >> $err.04
 ofile=${expid}_echam6_code-25_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 $cdo mulc,-0.272912 -selcode,25 ${expid}_echam6_co2_mm_${year}$suff $ofile$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 

 msg="#-- select code 6 from ECHAM co2 mm file"; echo $msg >> $err.04
 ofile=${expid}_echam6_code6_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 $cdo mulc,0.272912 -selcode,6 ${expid}_echam6_co2_mm_${year}$suff $ofile$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 

 [[ "${lco2_emis:-false}" != "true" ]] || {
   msg="#-- select carbon_emission from input file [g->kg]"; echo $msg >> $err.04
   ifile=${co2_emis_dir}/${co2_emis_file}
   ofile=${expid}_echam6_carbon_emission_${year}; rm -f $ofile$suff; touch $ofile$suff
   $cdo -f grb -mulc,0.001 -selvar,carbon_emission -selyear,$year $ifile $ofile$suff \
      2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 

   msg="#-- add weighted codes 24 and 25"; echo $msg >> $err.04
   ofile=${expid}_echam6_sum_emis_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
   $cdo sub input_cmor/${expid}_echam6_fLuc_mm_${year}$suff \
               ${expid}_echam6_code-25_mm_${year}$suff $ofile$suff \
      2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }

   msg="#-- fco2antt = carbon_emission_kg + code24 + code25"; echo $msg >> $err.04
   ofile=input_cmor/${expid}_echam6_fco2antt_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
   $cdo -setcode,20 -add ${expid}_echam6_carbon_emission_${year}$suff \
               ${expid}_echam6_sum_emis_mm_${year}$suff $ofile$suff \
      2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
   rm ${expid}_echam6_carbon_emission_${year}$suff ${expid}_echam6_sum_emis_mm_${year}$suff
 }

 msg="#-- combine files to get nbp"; echo $msg >> $err.04
 ofile=input_cmor/${expid}_echam6_nbp_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 $cdo sub ${expid}_echam6_code-25_mm_${year}$suff ${expid}_echam6_code6_mm_${year}$suff \
    ${expid}_echam6_code-25-6_mm_${year}$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 
 $cdo ifthen ${outdir}/ls_msk.nc -setcode,6 -sub ${expid}_echam6_code-25-6_mm_${year}$suff \
    input_cmor/${expid}_echam6_fLuc_mm_${year}$suff nbp${year}$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 
 $cdo mul ${outdir}/glac_msk.nc nbp${year}$suff $ofile$suff \
    2>> $out.04 1>> $err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; } 
 rm ${expid}_echam6_code-25_mm_${year}$suff   ${expid}_echam6_code6_mm_${year}$suff   \
    ${expid}_echam6_code-25-6_mm_${year}$suff nbp${year}$suff

 echo "apco2        end  : $(date)" >> $tmpout
)&


([[ ${lco2:-false} = false ]] || {
  echo "aplco2       begin: $(date)" >> $tmpout
  ofile_mm=${expid}_echam6_tracer_mm_${year}
  rm -f ${ofile_mm}$suff    ; touch ${ofile_mm}$suff
  ofile_plevs=input_cmor/${expid}_echam6_co2_plevs_mm_${year}
  rm -f ${ofile_plevs}$suff ; touch ${ofile_plevs}$suff
  for mo in $Months; do
   ifile=${expid}_echam6_tracer_${year}$mo$suff
   msg="#-- std ECHAM tracer aggr=mm, mo=$mo"; echo $msg > $err.05
   $cdo  monavg -selcode,${cl_POST_echam_tracer_mm} $ifile ${ofile_mm}$mo$suff \
     2>> $out.05 1>> $err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; } 
   cat ${ofile_mm}$mo$suff >> ${ofile_mm}$suff
   rm -f ${ofile_mm}$mo$suff
   msg="#-- CMIP5 Amon, plevs: code1(co2) of tracer stream"; echo $msg >> $err.05
   ${afterburner} ${popt} $ifile ${ofile_plevs}$mo$suff 1>> $out.05 2>> $err.05 \
    << EOF || { echo "ERROR: $msg" >> $err.05; exit 1; }
    &SELECT CODE=1,LEVEL=${plevs},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=70 &end
EOF
   cat ${ofile_plevs}$mo$suff >> ${ofile_plevs}$suff
   rm -f ${ofile_plevs}$mo$suff
  done
  echo "aplco2       end  : $(date)" >> $tmpout
}
)&

fi

#
#-- CMIP5 ECHAM6 post processing
#
if [[ ${DoAllVarsP:-true} = true || ${apalevel:-false} = true ]]; then

(msg="#-- CMIP5 Amon, alevel: ${cl_Amon_echam_alevel}"; echo $msg > $err.06
echo "apalevel      begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_alevel_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.06; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.06 2>> $err.06 \
    << EOF || { echo "ERROR: $msg" >> $err.06; exit 1; }
    &SELECT CODE=${cl_Amon_echam_alevel},LEVEL=-1,
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=20 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
echo "apalevel      end  : $(date)" >> $tmpout
)&
fi

if [[ ${DoAllVarsP:-true} = true || ${applevday:-false} = true ]]; then
 
 (msg="#-- CMIP5 day, plevday: ${cl_day_echam_plevday}"; echo $msg > $err.07 
 echo "applevday1  begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_plevday_dm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07 2>> $err.07  \
    << EOF || { echo "ERROR: $msg" >> $err.07; exit 1; }
    &SELECT CODE=${cl_day_echam_plevday},LEVEL=${plevday},
    FORMAT=1,INTERVAL=1,MEAN=1,TYPE=30 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
 echo "applevday1  end  : $(date)" >> $tmpout
)&


(msg="#-- CMIP5 Amon, plevs: ${cl_Amon_echam_plevs_2}"; echo $msg > $err.08
 echo "applevday2    begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_plevs_2_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.08; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.08 2>> $err.08 \
    << EOF || { echo "ERROR: $msg" >> $err.08; exit 1; }
    &SELECT CODE=${cl_Amon_echam_plevs_2},LEVEL=${plevs},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=30 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
 echo "applevday2    end  : $(date)" >> $tmpout
)&

(msg="#-- CMIP5 Amon, plevs: ${cl_Amon_echam_plevs_1}"; echo $msg > $err.09
 echo "applevday3     begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_plevs_1_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.09; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.09 2>> $err.09 \
    << EOF || { echo "ERROR: $msg" >> $err.09; exit 1; }
    &SELECT CODE=${cl_Amon_echam_plevs_1},LEVEL=${plevs},
    FORMAT=1,INTERVAL=0,MEAN=1,TYPE=30 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
echo "applevday3     end  : $(date)" >> $tmpout
)&

fi

if [[ ${DoAllVarsP:-true} = true || ${apagridmon:-false} = true ]]; then
 
(msg="#-- CMIP5 Amon, agrid: ${cl_Amon_echam_agrid}"; echo $msg > $err.10
echo "apagridmon    begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_agrid_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.10; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.10 2>> $err.10 \
    << EOF || { echo "ERROR: $msg" >> $err.10; exit 1; }
    &SELECT CODE=${cl_Amon_echam_agrid},FORMAT=1,INTERVAL=0,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
echo "apagridmon    end  : $(date)" >> $tmpout
)&

fi


if [[ ${DoAllVarsP:-true} = true || ${apagridday:-false} = true ]]; then
 
(msg="#-- CMIP5 day, agrid: ${cl_day_echam_agrid}"; echo $msg > $err.11
echo "apagridday1   begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_agrid_dm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.11; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.11 2>> $err.11  \
    << EOF || { echo "ERROR: $msg" >> $err.11; exit 1; }
    &SELECT CODE=${cl_day_echam_agrid},LEVEL=-1,
    FORMAT=1,INTERVAL=1,MEAN=1,TYPE=20 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
echo "apagridday1   end  : $(date)" >> $tmpout
)&


(msg="#-- CMIP5 day(min), agrid: ${cl_day_echam_agrid_min}"; echo $msg > $err.12
echo "apagridday2   begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_agrid_dmin_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.12; exit 1; }
  $cdo  daymin -selcode,${cl_day_echam_agrid_min} $ifile $ofile$mo$suff \
  2>> $out.12 1>> $err.12 || { echo "ERROR: $msg" >> $err.12; exit 1; } 
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
echo "apagridday2   end  : $(date)" >> $tmpout
)&


( msg="#-- CMIP5 day(max), agrid: ${cl_day_echam_agrid_max}"; echo $msg > $err.13
echo "apagridday3   begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_agrid_dmax_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.13; exit 1; }
  $cdo  daymax -selcode,${cl_day_echam_agrid_max} $ifile $ofile$mo$suff \
    2>> $out.13 1>> $err.13 || { echo "ERROR: $msg" >> $err.13; exit 1; } 
  cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
 done
echo "apagridday3   end  : $(date)" >> $tmpout
)&

fi

if [[ ${DoAllVarsP:-true} = true || ${applev6hr:-false} = true ]]; then

(msg="#-- CMIP5 plevsyn: ${cl_6hrPlev_echam_plevsyn}"; echo $msg > $err.14
echo "applev6hr     begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_plevsyn_6hr_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.14; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.14 2>> $err.14  \
    << EOF || { echo "ERROR: $msg" >> $err.14; exit 1; }
    &SELECT CODE=${cl_6hrPlev_echam_plevsyn},LEVEL=${plevsyn},
    FORMAT=1,INTERVAL=1,MEAN=0,TYPE=70 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
echo "applev6hr     end  : $(date)" >> $tmpout
)&

fi

if [[ ${DoAllVarsP:-true} = true || ${applevsynyear:-false} = true ]]; then

(msg="#-- CMIP5 plevsyn: psl"; echo $msg > $err.15
echo "applevsynyear begin: $(date)" >> $tmpout
 ofile=${expid}_echam6_plevsyn_psl_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.15; exit 1; }
  ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.15 2>> $err.15  \
    << EOF || { echo "ERROR: $msg" >> $err.15; exit 1; }
    &SELECT CODE=151,LEVEL=-1,FORMAT=1,INTERVAL=1,MEAN=0,TYPE=70 &end
EOF
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
echo "applevsynyear end  : $(date)" >> $tmpout
)&

fi

if [[ ${DoAllVarsP:-true} = true || ${apc5:-false} = true ]]; then
 
(msg="#-- CMIP5 Amon co2 agrid: ${cl_POST_echam_co2_mm}"; echo $msg >> $err.16 
echo "apc5          begin: $(date)" >> $tmpout
 ofile=${expid}_co2_apoint_mm_${year}; rm -f $ofile$suff; touch $ofile$suff
 for mo in $Months; do
  $cdo  monmean -mulc,5.100656e14 -fldmean -selcode,8 \
    ${expid}_echam6_co2_${year}$mo$suff $ofile$mo$suff \
    2>> $out.16 1>> $err.16 || { echo "ERROR: $msg" >> $err.16; exit 1; } 
  cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
 done
echo "apc5          end  : $(date)" >> $tmpout
)&

fi

#
#-- RCM forcing
#

if [[ ${DoAllVarsP:-true} = true || ${aprcmforcing:-false} = true ]]; then
 
([[ $rcm_requested = no ]] || {
 if [[ $jobnum = 1 ]]; then
 echo "rcm job1      begin: $(date)" >> $tmpout
   $cdo selcode,4,9,11 ${outdir}/fx${suff} jsbfx${suff} 
   $cdo selcode,129  ${outdir}/echam6/${expid}_echam6_echam_${year}01${suff} fis1${suff}
   $cdo selrec,1 fis1${suff} fis2${suff}
   $cdo settime,0001-01-31 fis2${suff} fis3${suff}
   $cdo -f nc merge jsbfx${suff} fis3${suff} fx1.nc
   $cdo -f grb copy fx1.nc ${outdir}/rcm/const${suff}
   rm jsbfx${suff} fis?${suff} fx1.nc
 echo "rcm job1      end  : $(date)" >> $tmpout
  fi
})&

([[ $rcm_requested = no ]] || {
 echo "rcm_133       begin: $(date)" >> $tmpout
  msg="#-- CMIP5 6hr code 133"; echo $msg > $err.17
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.17; exit 1; }
   $cdo  selcode,133,134 $ifile                 \
    ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo$suff  \
    2>> $out.17 1>> $err.17 || { echo "ERROR: $msg" >> $err.17; exit 1; } 
   if [[ $suff = .sz ]]; then
    rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo.grb
    $grib -sunzip         \
     ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo.sz  \
     ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo.grb \
     1>>$out.17 2>>$err.17 || { echo "ERROR: $msg" >> $err.17; exit 1; } 
   fi
   rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo.grb.gz
   gzip  ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo.grb || \
    { echo "ERROR: mo=$mo gzip $msg" >> $err.17; exit 1; }
   rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_133_${year}$mo.grb
  done
 echo "rcm_133       end  : $(date)" >> $tmpout
})&


([[ $rcm_requested = no ]] || {
 echo "rcm_155       begin: $(date)" >> $tmpout
  msg="#-- CMIP5 6hrLev, codes 130,138,155"; echo $msg > $err.18
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.18; exit 1; }
   $cdo  selcode,130,138,155 $ifile                 \
    ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo$suff  \
    2>> $out.18 1>> $err.18 || { echo "ERROR: $msg" >> $err.18; exit 1; } 
   if [[ $suff = .sz ]]; then
    rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo.grb
    $grib -sunzip         \
      ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo.sz  \
      ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo.grb \
      1>>$out.18 2>>$err.18 || { echo "ERROR: $msg" >> $err.18; exit 1; } 
   fi
   rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo.grb.gz
   gzip  ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo.grb || \
    { echo "ERROR: mo=$mo gzip $msg" >> $err.18; exit 1; }
   rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_c5_${year}$mo.grb
  done
 echo "rcm_155       end  : $(date)" >> $tmpout
})&


([[ $rcm_requested = no ]] || {
 echo "rcm_153-211   begin: $(date)" >> $tmpout
  msg="#-- CMIP5 6hr 153-211   "; echo $msg > $err.19
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.19; exit 1; }
   etc_codes="153,154,102,103,139,210"         # beyond CMIP5 requested variables
   etc_codes=${etc_codes}",140,141,214,193,211"    # nice-to-have variables
   $cdo  selcode,${etc_codes} $ifile \
    ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo$suff\
    2>> $out.15 1>> $err.19 || { echo "ERROR: $msg" >> $err.19; exit 1; } 
   if [[ $suff = .sz ]]; then
    rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo.grb
    $grib -sunzip          \
     ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo.sz  \
     ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo.grb \
     1>>$out.19 2>>$err.19 || { echo "ERROR: $msg" >> $err.19; exit 1; } 
   fi
   rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo.grb.gz
   gzip  ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo.grb || \
    { echo "ERROR: mo=$mo gzip $msg" >> $err.19; exit 1; }
   rm -f ${outdir}/rcm/${expid}_${atmmod}_rcm_etc_${year}$mo.grb
  done
 echo "rcm_153-211   end  : $(date)" >> $tmpout
})&


([[ $rcm_requested = no ]] || {
 echo "rcm_68        begin: $(date)" >> $tmpout
  msg="#-- CMIP5 6hr code 68"; echo $msg > $err.20
  for mo in $Months; do
   ifile=${outdir}/${srfmod}/${expid}_${srfmod}_land_${year}$mo$suff
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.20; exit 1; }
   $cdo  selcode,68 $ifile \
    ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo$suff \
    2>>$out.15 1>>$err.20 || { echo "ERROR: $msg" >> $err.20; exit 1; } 
   if [[ $suff = .sz ]]; then
    rm -f ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo.grb
    $grib -sunzip          \
     ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo.sz  \
     ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo.grb \
     1>>$out.20 2>>$err.20 || { echo "ERROR: $msg" >> $err.20; exit 1; } 
   fi
   rm -f ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo.grb.gz
   gzip  ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo.grb || \
    { echo "ERROR: mo=$mo gzip $msg" >> $err.20; exit 1; }
   rm -f ${outdir}/rcm/${expid}_${srfmod}_rcm_land_${year}$mo.grb
  done
 echo "rcm_68        end  : $(date)" >> $tmpout
})&

fi

#-- complete postprocessing
if [[ ${DoAllVarsP:-true} = true || ${appost:-false} = true ]]; then
wait

(echo "merge type30/70 begin: $(date)" >> $tmpout
 msg="#-- Merging type 30/70"; echo $msg >> $err.21
 rm -f ${expid}_${atmmod}_ATM_mm_${year}$suff
 in1=${expid}_${atmmod}_ATM_mm_type30_${year}$suff
 in2=${expid}_${atmmod}_ATM_mm_type70_${year}$suff
 $cdo merge $in1 $in2 ${expid}_${atmmod}_ATM_mm_${year}$suff \
  2>> $out.21 1>> $err.21 || { echo "ERROR: $msg" >> $err.21; exit 1; }
 rm $in1 $in2; echo "merge type30/70 end  : $(date)" >> $tmpout
)&
(echo "merge to complete BOT begin: $(date)" >> $tmpout
 msg="#-- Merging to complete BOT"; echo $msg >> $err.22
 rm -f merged_BOT_mm_${year}$suff
 in1=${expid}_${atmmod}_BOT_mm_${year}$suff
 in2=${expid}_echam6_agrid_mm_${year}$suff
 $cdo merge $in1 $in2 merged_BOT_mm_${year}$suff \
  2>> $out.22 1>> $err.22 || { echo "ERROR: $msg" >> $err.22; exit 1; }
 mv merged_BOT_mm_${year}$suff ${expid}_${atmmod}_BOT_mm_${year}$suff
 echo "merge to complete BOT end  : $(date)" >> $tmpout
)&

fi

#-- complete processing of daily max/min
if [[ ${DoAllVarsP:-true} = true || ${apagridday:-false} = true ]]; then
wait

(echo "apagridday4   end  : $(date)" >> $tmpout
 msg="#-- Monthly mean of daily min / max"; echo $msg >> $err.23
 $cdo  monmean ${expid}_echam6_agrid_dmax_${year}$suff \
  ${expid}_echam6_agrid_dmaxmm_${year}$suff \
  2>> $out.23 1>> $err.23 || { echo "ERROR: $msg" >> $err.23; exit 1; } 
 $cdo  monmean ${expid}_echam6_agrid_dmin_${year}$suff \
  ${expid}_echam6_agrid_dminmm_${year}$suff \
  2>> $out.23 1>> $err.23 || { echo "ERROR: $msg" >> $err.23; exit 1; } 
 msg="#-- Merging monthly mean of daily min/max"; echo $msg >> $err.23
 rm -f ${expid}_echam6_agrid_dxmm_${year}$suff
 in1=${expid}_echam6_agrid_dmaxmm_${year}$suff
 in2=${expid}_echam6_agrid_dminmm_${year}$suff
 $cdo merge $in1 $in2 ${expid}_echam6_agrid_dxmm_${year}$suff \
  2>> $out.23 1>> $err.23 || { echo "ERROR: $msg" >> $err.23; exit 1; }
 rm $in1 $in2
echo "apagridday4   begin: $(date)" >> $tmpout
)&

fi
#
#-- check for errors in POST processing of ECHAM output
#

wait
rm -f ERROR.ctl 
grep -v "Confusing string" ${err}.*   > ${err}.tmp || touch ${err}.tmp    
grep "ERROR:"              ${err}.tmp > ERROR.ctl  || touch ERROR.ctl 
grep "Error: NetCDF error" ${err}.tmp >> ERROR.ctl || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "ERRORS detected when POST processing\n "
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl; rm ${err}.tmp
  POST_status=${POST_status:-""}"echam6:post"; exit 1
else
  printf "\n   |- No problems detected when POST processing ECHAM output.\n"
  rm -f ERROR.ctl ${err}.tmp
  for no in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 \
            15 16 17 18 19 20 21 22 23; do
    cat $err.${no} >> $err 2>/dev/null || echo No file 1>/dev/null
    cat $out.${no} >> $out 2>/dev/null || echo No file 1>/dev/null
    rm -f $out.${no} $err.${no}
  done
  printf "\n   |- Moving input for CMOR processing into directory input_cmor.\n"
  for table in agrid plevday plevs plevsyn alevel apoint; do
    mv -f ${expid}_*_${table}_*_${year}$suff input_cmor 2>/dev/null || true
  done
fi

printf "\n#-- ECHAM: End of POST loadbalance at $(date)\n\n"    >> $tmpout
printf "\n#-- End of post processsing of ECHAM data at $(date)\n\n" >> $err

fi

#
#################################################################################

#################################################################################
#
#-- CMOR rewriting of ECHAM output
#   - ca. 6 min wenn parallel; sonst 30 min (-LR)
#

Rec6hr=$(expr $RecDay \* 4)

if [[ $cmor_proc_echam = yes ]]; then

cp ${outdir}/CMORCONST.txt .

err=tmpdir_post/${expid}.${atmmod}.cmor.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.${atmmod}.cmor.${enddate}.out; rm -f ${out}*

printf "\n#-- Start of CMOR rewriting of ECHAM output at $(date)\n\n"  > $err.00

[[ ! -f ${outdir}/fx.grb ]] && {
  msg="ERROR: std post processing of JSBACH has to be run first"
  echo $msg >> $err.00; exit 1; }

tmpout=tmpdir_post/load_balance_cmor.txt; rm -f $tmpout; touch $tmpout
printf "\n#-- ECHAM: Begin of CMOR loadbalance at $(date)\n\n"    > $tmpout

#
#-- CMOR processing of variables always requested (no call to c5_request)
#

#-- Amon, agrid, atmos ( tbd: hurs huss ccb )
if [[ ${DoAllVarsC:-true} = true || ${acta:-false} = true ]]; then

(echo "acta          begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_echam6_agrid_mm_${year}$suff
 table=Amon; shape=agrid; realm=atmos; freq=mon; chunk_range=""
 vars=pr,prsn,prc,evspsbl,tauu,tauv,hfls,hfss,rlds,rlus,rsds,rsus,rsdscs
 vars=${vars},rsuscs,rldscs,rsdt,rsut,rlut,rlutcs,rsutcs,prw,clt,clwvi
 vars=${vars},clivi,cct,ts,tas,psl,uas,vas,sfcWind,rtmt,ps
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.01
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.01; }
   ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 33 
   /
   &CMORVARS
   VARTABIN(:,1) ="pr     ","kg m-2 s-1","    ","2,142,143     "
   VARTABIN(:,2) ="prsn   ","kg m-2 s-1","    ","1,144	       "
   VARTABIN(:,3) ="prc    ","kg m-2 s-1","    ","1,143	       "
   VARTABIN(:,4) ="evspsbl","kg m-2 s-1","    ","1,182	       "
   VARTABIN(:,5) ="tauu   ","Pa        ","down","1,180	       "
   VARTABIN(:,6) ="tauv   ","Pa        ","down","1,181	       "
   VARTABIN(:,7) ="hfls   ","W m-2     ","up  ","1,147	       "
   VARTABIN(:,8) ="hfss   ","W m-2     ","up  ","1,146	       "
   VARTABIN(:,9) ="rlds   ","W m-2     ","down","2,177,205     "
   VARTABIN(:,10) ="rlus   ","W m-2     ","up  ","1,205	       "
   VARTABIN(:,11) ="rsds   ","W m-2     ","down","2,176,204    "
   VARTABIN(:,12) ="rsus   ","W m-2     ","up  ","1,204	       "
   VARTABIN(:,13) ="rsdscs ","W m-2     ","down","3,176,185,204"
   VARTABIN(:,14) ="rsuscs ","W m-2     ","up  ","3,176,185,204"
   VARTABIN(:,15) ="rldscs ","W m-2     ","down","2,186,205    "
   VARTABIN(:,16) ="rsdt   ","W m-2     ","down","1,184	       "
   VARTABIN(:,17) ="rsut   ","W m-2     ","up  ","1,203	       "
   VARTABIN(:,18) ="rlut   ","W m-2     ","up  ","1,179	       "
   VARTABIN(:,19) ="rlutcs ","W m-2     ","up  ","1,188	       "
   VARTABIN(:,20) ="rsutcs ","W m-2     ","up  ","2,184,187    "
   VARTABIN(:,21) ="prw    ","kg m-2    ","    ","1,230	       "
   VARTABIN(:,22) ="clt    ","%         ","    ","1,164	       "
   VARTABIN(:,23) ="clwvi  ","kg m-2    ","    ","1,231	       "
   VARTABIN(:,24) ="clivi  ","kg m-2    ","    ","1,150	       "
   VARTABIN(:,25) ="cct    ","Pa        ","    ","1,217	       "
   VARTABIN(:,26) ="ts     ","K         ","    ","1,169	       "
   VARTABIN(:,27) ="tas    ","K         ","    ","1,167	       "
   VARTABIN(:,28) ="psl    ","Pa        ","    ","1,151	       " 
   VARTABIN(:,29) ="uas    ","m s-1     ","    ","1,165	       "
   VARTABIN(:,30) ="vas    ","m s-1     ","    ","1,166	       "
   VARTABIN(:,31) ="sfcWind","m s-1     ","    ","1,171	       "
   VARTABIN(:,32) ="rtmt   ","W m-2     ","down","3,179,184,203"
   VARTABIN(:,33) ="ps     ","Pa        ","    ","1,134        "
 /
EOF
echo "acta          end  : $(date)" >> $tmpout
)&

fi

#-- Amon, agrid, atmos (tasmin tasmax)
if [[ ${DoAllVarsC:-true} = true || ${actasmin:-false} = true ]]; then

(echo "actasmin      begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_agrid_dxmm_${year}$suff
 table=Amon; shape=agrid; realm=atmos; freq=mon; chunk_range=""; vars=tasmin,tasmax
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.02
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.02; }
   ${cmor} << EOF 1>>$out.02 2>>$err.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2
   /
   &CMORVARS
   VARTABIN(:,1)  ="tasmin ","K","","1,202"
   VARTABIN(:,2)  ="tasmax ","K","","1,201"
   /
EOF
echo "actasmin      end  : $(date)" >> $tmpout
)&

fi

#-- Lmon, agrid, land (mrso mrro mrros)
if [[ ${DoAllVarsC:-true} = true || ${acmrso:-false} = true ]]; then

(echo "acmrso        begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_agrid_mm_${year}$suff
 table=Lmon; shape=agrid; realm=land; freq=mon; chunk_range=""; vars=mrso,mrro,mrros
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03; }
   ${cmor} << EOF 1>>$out.03 2>>$err.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  3
   /
   &CMORVARS
   VARTABIN(:,1) ="mrso    ","kg m-2    ","    ","1,140	     "
   VARTABIN(:,2) ="mrro    ","kg m-2 s-1","    ","1,160	     "
   VARTABIN(:,3) ="mrros   ","kg m-2 s-1","    ","2,160,161  "   ! ???
   /
EOF
echo "acmrso        end  : $(date)" >> $tmpout
)&

fi

#-- LImon, agrid, land ( snw snm;  tbd: sbl; angefragt bei MG ME VG )
if [[ ${DoAllVarsC:-true} = true || ${acsnw:-false} = true ]]; then

(echo "acsnw         begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_agrid_mm_${year}$suff
 table=LImon; shape=agrid; realm=landIce; freq=mon; chunk_range=""; vars=snw,snm
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.04
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.04; }
   ${cmor} << EOF 1>>$out.04 2>>$err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2
   /
   &CMORVARS
   VARTABIN(:,1)  ="snw    ","kg m-2    ","    ","1,141	     "
   VARTABIN(:,2)  ="snm    ","kg m-2 s-1","    ","1,218	     "
   /
EOF
echo "acsnw         end  : $(date)" >> $tmpout
)&

fi

#-- Amon, apoint, atmos (co2[mass[Clim]])
if [[ ${DoAllVarsC:-true} = true || ${acco2mass:-false} = true ]]; then

(echo "acco2mass     begin: $(date)" >> $tmpout
if [[ ${lco2:-false} = false ]]; then
  var_comment="Atmospheric CO2 'seen' by the carbon cycle. "
  if [[ ${lco2_scenario:-false} = true ]]; then
   vars=co2mass
   time_axis=time
 else
   vars=co2massClim
   time_axis=time2
   var_comment=${var_comment}"Small variations of the monthly climatological values result " 
   var_comment=${var_comment}"from the diagnostics. The true atm. co2 content " 
   var_comment=${var_comment}"in the model is time invariant."
 fi
 if [[ ${lco2_scenario:-false} = true || $jobnum = 1 ]]; then
  ifile=input_cmor/${expid}_co2_apoint_mm_${year}$suff
  table=Amon; shape=apoint; realm=atmos; freq=mon; chunk_range=""
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.06
  c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
  [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.06; }
   ${cmor} << EOF 1>>$out.06 2>>$err.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   TIME_AXIS      = "${time_axis}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   CLIMYEAR       = ${iniyear}0101,${finyear}1231
   VAR_COMMENT    = "${var_comment:-""}"
   ANZVARS        = 1 
  /
  &CMORVARS
   VARTABIN(:,1)  ="${vars}","kg","    ","1,008	     "
  /
EOF
 fi
else
 ifile=input_cmor/${expid}_echam6_co2_plevs_mm_${year}$suff
 table=Amon; shape=plevs; realm=atmos; freq=mon; chunk_range=""; vars=co2
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.06
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.06; }
   ${cmor} << EOF 1>>$out.06 2>>$err.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1 
  /
  &CMORVARS
  VARTABIN(:,1)  ="co2","1.e-6","    ","1,001	     "
  /
EOF
fi
echo "acco2mass     end  : $(date)" >> $tmpout
)&

fi
								   
#-- Amon, agrid, atmos (fco2nat) 
if [[ ${DoAllVarsC:-true} = true || ${acfco2nat:-false} = true ]]; then

[[ "${ocemod}" = "" || "${res_mod}" = "P" ]] || {
(echo "acfco2nat     begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_fco2nat_mm_${year}$suff
 table=Amon; shape=agrid; realm=atmos; freq=mon;chunk_range=""; vars=fco2nat
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.05
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.05; }
   ${cmor} << EOF 1>>$out.05 2>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1 
  /
  &CMORVARS
  VARTABIN(:,1)  ="fco2nat","kg m-2 s-1","up","1,005	     "
  /
EOF
echo "acfco2nat     end  : $(date)" >> $tmpout
 )&
}
fi

#-- Amon, agrid, atmos (fco2antt) 
#   CMIP5 data protocol: emission driven runs only
#   MPI-M : all coupled runs
if [[ ${DoAllVarsC:-true} = true || ${acfco2antt:-false} = true ]]; then

[[ "${lco2_emis:-false}" != "true" ]] || {
(echo "acfco2antt    begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_fco2antt_mm_${year}$suff
 table=Amon; shape=agrid; realm=atmos; freq=mon; chunk_range=""; vars=fco2antt
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.07; }
   ${cmor} << EOF 1>>$out.07 2>>$err.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1 
  /
  &CMORVARS
  VARTABIN(:,1)  ="fco2antt","kg m-2 s-1","up","1,020	     "
  /
EOF
echo "acfco2antt    end  : $(date)" >> $tmpout
)&
}
fi

#-- Lmon, agrid, land (nbp)
if [[ ${DoAllVarsC:-true} = true || ${acnbp:-false} = true ]]; then

[[ "${ocemod}" = "" ]] || {
(echo "acnbp         begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_nbp_mm_${year}$suff
 table=Lmon; shape=agrid; realm=land;  freq=mon; chunk_range=""; vars=nbp
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.08
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.08; }
   ${cmor} << EOF 1>>$out.08 2>>$err.08 || { echo "ERROR: $msg" >> $err.08; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1
  /
  &CMORVARS
  VARTABIN(:,1)  ="nbp     ","kg m-2 s-1","down","1,006"
  /
EOF
echo "acnbp         end  : $(date)" >> $tmpout
)&
}
fi

#-- Lmon, agrid, land (fFire)
if [[ ${DoAllVarsC:-true} = true || ${acfFire:-false} = true ]]; then

[[ "${ocemod}" = "" || ${dynveg_feedback} = false ]] || {
(echo "acfFire       begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_fFire_mm_${year}$suff
 table=Lmon; shape=agrid; realm=land;  freq=mon; chunk_range=""; vars=fFire
 msg="#-- CMOR: $table $shape $realm $vars (varying)"; echo $msg > $err.09
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.09; }
   ${cmor} << EOF 1>>$out.09 2>>$err.09 || { echo "ERROR: $msg" >> $err.09; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1 
  /
  &CMORVARS
  VARTABIN(:,1)  ="fFire   ","kg m-2 s-1","up  ","1,026"
  /
EOF
echo "acfFire       end  : $(date)" >> $tmpout
)&
}

fi


#-- Lmon, agrid, land (fLuc)
if [[ ${DoAllVarsC:-true} = true || ${acfLuc:-false} = true ]]; then

[[ "${ocemod}" = "" ]] || {
(echo "acfLuc        begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_fLuc_mm_${year}$suff
 table=Lmon; shape=agrid; realm=land;  freq=mon; chunk_range=""; vars=fLuc
 msg="#-- CMOR: $table $shape $realm fLuc (variable)"; echo $msg > $err.10
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
  c5_find_chunk ${c5archdir} $expName $member \
    $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
  echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.10; }
 ${cmor} << EOF 1>>$out.10 2>>$err.10 || { echo "ERROR: $msg" >> $err.10; exit 1; }
 &CMORCTL
 INPUT_FILENAME = "${ifile}"
 CHUNK_RANGE    = "${chunk_range}"
 TABLE_NAME     = "${table}"
 REALM          = "${realm}"
 REC_NUM        =  ${RecMo}
 OUT_FLAG       = "${outflag}" 
 SHAPE          = "${shape}"
 ANZVARS        = 1 
 /
 &CMORVARS
 VARTABIN(:,1)  ="fLuc    ","kg m-2 s-1","up  ","1,024"
 /
EOF
echo "acfLuc        end  : $(date)" >> $tmpout
)&
}
fi
			      
#-- Amon, alevel, atmos (cl clw cli)
if [[ ${DoAllVarsC:-true} = true || ${accl:-false} = true ]]; then

(echo "accl          begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_alevel_mm_${year}$suff
 table=Amon; shape=alevel; realm=atmos; freq=mon; chunk_range=""; vars=cl,clw,cli
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.11
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.11; }
 ${cmor} << EOF 1>>$out.11 2>>$err.11 || { echo "ERROR: $msg" >> $err.11; exit 1; }
  &CMORCTL
  INPUT_FILENAME = "${ifile}"
  CHUNK_RANGE    = "${chunk_range}"
  TABLE_NAME     = "${table}"
  REALM          = "${realm}"
  REC_NUM        =  ${RecMo}
  OUT_FLAG       = "${outflag}" 
  SHAPE          = "${shape}"
  ANZVARS        =  3
  /
  &CMORVARS
  VARTABIN(:,1) = "cl     ","%","    ","1,223"
  VARTABIN(:,2) = "clw    ","1","    ","1,153"
  VARTABIN(:,3) = "cli    ","1","    ","1,154"
  /
EOF
echo "accl          end  : $(date)" >> $tmpout
)&
fi

#-- Amon, plevs, atmos ( wap zg hur tro3 )
if [[ ${DoAllVarsC:-true} = true || ${achur:-false} = true ]]; then

(echo "achur         begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_plevs_2_mm_${year}$suff
 table=Amon; shape=plevs; realm=atmos; freq=mon; chunk_range=""
 vars=hur,wap,zg,tro3
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.12
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.12; }
   ${cmor} << EOF 1>>$out.12 2>>$err.12 || { echo "ERROR: $msg" >> $err.12; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "$ifile"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 4
  /
  &CMORVARS
  VARTABIN(:,1) = "hur ","%     ","    ","1,157"
  VARTABIN(:,2) = "wap ","Pa s-1","    ","1,135"
  VARTABIN(:,3) = "zg  ","m     ","    ","1,156"
  VARTABIN(:,4) = "tro3","1e-9  ","    ","1,236"
  /
EOF
echo "achur         end  : $(date)" >> $tmpout
)&
fi

#-- Amon, plevs, atmos (hus ta ua va)
if [[ ${DoAllVarsC:-true} = true || ${achus:-false} = true ]]; then

(echo "achus         begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_plevs_1_mm_${year}$suff
 table=Amon; shape=plevs; realm=atmos; freq=mon; chunk_range=""
 vars=hus,ta,ua,va
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.13
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.13; }
   ${cmor} << EOF 1>>$out.13 2>>$err.13 || { echo "ERROR: $msg" >> $err.13; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "$ifile"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 4
  /
  &CMORVARS
  VARTABIN(:,1) = "hus","1     ","    ","1,133"
  VARTABIN(:,2) = "ta ","K     ","    ","1,130"
  VARTABIN(:,3) = "ua ","m s-1 ","    ","1,131"
  VARTABIN(:,4) = "va ","m s-1 ","    ","1,132"
  /
EOF
echo "achus         end  : $(date)" >> $tmpout
)&
fi

#-- aero(2D; od550aer od550lt1aer abs550aer od870aer rsdsdiff rsdscsdiff 
#            reffclwtop cldncl: all from external input)


#-- day, agrid, atmos (tasmin)
if [[ ${DoAllVarsC:-true} = true || ${actasminday:-false} = true ]]; then

(echo "actasminday   begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_agrid_dmin_${year}$suff
 table=day; shape=agrid; realm=atmos; freq=day; chunk_range=""; vars=tasmin
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.14
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.14; }
   ${cmor} << EOF 1>>$out.14 2>>$err.14 || { echo "ERROR: $msg" >> $err.14; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
  /
  &CMORVARS
  VARTABIN(:,1)  ="tasmin ","K","","1,202"
  /
EOF
#-- day, agrid, atmos (tasmax)

 ifile=input_cmor/${expid}_echam6_agrid_dmax_${year}$suff
 table=day; shape=agrid; realm=atmos; freq=day; chunk_range=""; vars=tasmax
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.15
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.15; }
   ${cmor} << EOF 1>>$out.15 2>>$err.15 || { echo "ERROR: $msg" >> $err.15; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
  /
  &CMORVARS
  VARTABIN(:,1)  ="tasmax","K","","1,201"
  /
EOF
echo "actasminday   end  : $(date)" >> $tmpout
 )&
fi

#-- day, agrid, atmos ( tas pr psl sfcWind; tbd: huss )
if [[ ${DoAllVarsC:-true} = true || ${actasday:-false} = true ]]; then

(echo "actasday      begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_agrid_dm_${year}$suff
 table=day; shape=agrid; realm=atmos; freq=day; chunk_range=""; vars=tas,pr,psl,sfcWind
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.16
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.16; }
   ${cmor} << EOF 1>>$out.16 2>>$err.16 || { echo "ERROR: $msg" >> $err.16; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  4
  /
  &CMORVARS
  VARTABIN(:,1)  ="tas    ","K         ","    ","1,167	     "
  VARTABIN(:,2)  ="pr     ","kg m-2 s-1","    ","2,142,143"
  VARTABIN(:,3)  ="psl    ","Pa        ","    ","1,151    "
  VARTABIN(:,4)  ="sfcWind","m s-1     ","    ","1,171        "
  /
EOF
echo "actasday      end  : $(date)" >> $tmpout
)&
fi

#
#-- CMOR processing of variables not always requested (need to call c5_request)
#

#-- day, table 2, agrid (sfcWindmax; tbd:rhs)
if [[ ${DoAllVarsC:-true} = true || ${acsfcwindmax:-false} = true ]]; then

(echo "acsfcwindmax  begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_echam6_agrid_dmax_${year}$suff
 table=day; shape=agrid; realm=atmos; freq=day; chunk_range=""; vars=sfcWindmax
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.17
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.17; }
     ${cmor} << EOF 1>>$out.17 2>>$err.17 || { echo "ERROR: $msg" >> $err.17; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        =  1
    /
    &CMORVARS
    VARTABIN(:,1)  ="sfcWindmax","m s-1     ","    ","1,216        "
    /
EOF
echo "acsfcwindmax  end  : $(date)" >> $tmpout
};)&
fi

#-- day, agrid, atmos (uas vas clt prc prsn hfls hfss rlds rlus rsds rsus rlut)
if [[ ${DoAllVarsC:-true} = true || ${acuasday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_agrid_dm_${year}$suff
 table=day; shape=agrid; realm=atmos; freq=day; chunk_range=""
 vars=uas,vas,clt,prc,prsn,hfls,hfss,rlds,rlus,rsds,rsus,rlut
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "acuasday      begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.19
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.19; }
     ${cmor} << EOF 1>>$out.19 2>>$err.19 || { echo "ERROR: $msg" >> $err.19; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 12 
    /
    &CMORVARS
    VARTABIN(:,1)  ="uas    ","m s-1     ","    ","1,165	     "
    VARTABIN(:,2)  ="vas    ","m s-1     ","    ","1,166	     "
    VARTABIN(:,3)  ="clt    ","%         ","    ","1,164	     "
    VARTABIN(:,4)  ="prc    ","kg m-2 s-1","    ","1,143	     "
    VARTABIN(:,5)  ="prsn   ","kg m-2 s-1","    ","1,144	     "
    VARTABIN(:,6)  ="hfls   ","W m-2     ","up  ","1,147	     "
    VARTABIN(:,7)  ="hfss   ","W m-2     ","up  ","1,146	     "
    VARTABIN(:,8)  ="rlds   ","W m-2     ","down","2,177,205   "
    VARTABIN(:,9)  ="rlus   ","W m-2     ","up  ","1,205	     "
    VARTABIN(:,10) ="rsds   ","W m-2     ","down","2,176,204   "
    VARTABIN(:,11) ="rsus   ","W m-2     ","up  ","1,204	     "
    VARTABIN(:,12) ="rlut   ","W m-2     ","up  ","1,179	     "
    /
EOF
echo "acuasday      end  : $(date)" >> $tmpout
};)&
fi

#-- day, agrid, landIce (snw)
if [[ ${DoAllVarsC:-true} = true || ${acsnwday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_agrid_dm_${year}$suff
 table=day; shape=agrid; realm=landIce; freq=day; chunk_range=""; vars=snw
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
   echo "acsnwday      begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.22a
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.22a; }
     ${cmor} << EOF 1>>$out.22a 2>>$err.22a || { echo "ERROR: $msg" >> $err.22a; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 1 
    /
    &CMORVARS
    VARTABIN(:,1) ="snw    ","kg m-2    ","    ","1,141"
    /
EOF
echo "acsnwday      end  : $(date)" >> $tmpout
};)&
fi

#-- day, agrid, land (mrro,tslsi)
if [[ ${DoAllVarsC:-true} = true || ${acmrroday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_agrid_dm_${year}$suff
 table=day; shape=agrid; realm=land; freq=day; chunk_range=""; vars=mrro,tslsi
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
   echo "acmrroday     begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.22b
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.22b; }
     ${cmor} << EOF 1>>$out.22b 2>>$err.22b || { echo "ERROR: $msg" >> $err.22b; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 2 
    /
    &CMORVARS
    VARTABIN(:,1) ="mrro   ","kg m-2 s-1","    ","1,160	       "
    VARTABIN(:,2) ="tslsi  ","K         ","    ","3,097,102,169"
    /
EOF
echo "acmrroday     end  : $(date)" >> $tmpout
};)&
fi

#-- 6hrPlev, agrid, atmos (psl)
if [[ ${DoAllVarsC:-true} = true || ${acpsl6hr:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevsyn_psl_${year}$suff
 table=6hrPlev; shape=agrid; realm=atmos; freq=6hr; chunk_range=""; vars=psl
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ "$requested" = no ]] || {
 echo "acpsl6hr      begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.28
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ "$outflag" = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}12311800 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.28; }
     ${cmor} << EOF 1>>$out.28 2>>$err.28 || { echo "ERROR: $msg" >> $err.28; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     TIME_AXIS      = "time1"
     REC_NUM        =  ${Rec6hr}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 1
    /
    &CMORVARS
    VARTABIN(:,1) = "psl","Pa"     ,"    ","1,151        "
    /
EOF
echo "acpsl6hr      end  : $(date)" >> $tmpout
};
)&
fi

#-- day, table 3, plevday, atmos (hur hus)
if [[ ${DoAllVarsC:-true} = true || ${achurday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevday_dm_${year}$suff
 table=day; shape=plevday; realm=atmos; freq=day; chunk_range=""; vars=hur,hus
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "achurday      begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.23
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.23; }
     ${cmor} << EOF 1>>$out.23 2>>$err.23 || { echo "ERROR: $msg" >> $err.23; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 2
    /
    &CMORVARS
    VARTABIN(:,1) = "hus","1"     ,"    ","1,133        "
    VARTABIN(:,2) = "hur","%"     ,"    ","1,157        "
    /
EOF
echo "achurday      end  : $(date)" >> $tmpout
};)&
fi

#-- day, table 3, plevday, atmos (wap zg)
if [[ ${DoAllVarsC:-true} = true || ${acwapday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevday_dm_${year}$suff
 table=day; shape=plevday; realm=atmos; freq=day; chunk_range=""; vars=wap,zg
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "acwapday      begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.24
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.24; }
     ${cmor} << EOF 1>>$out.24 2>>$err.24 || { echo "ERROR: $msg" >> $err.24; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 2
    /
    &CMORVARS
    VARTABIN(:,1) = "wap","Pa s-1","    ","1,135        "
    VARTABIN(:,2) = "zg ","m"     ,"    ","1,156        "
    /
EOF
echo "acwapday      end  : $(date)" >> $tmpout
};)&
fi

#-- day, table 3, plevday, atmos (ua va)
if [[ ${DoAllVarsC:-true} = true || ${acuaday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevday_dm_${year}$suff
 table=day; shape=plevday; realm=atmos; freq=day; chunk_range=""; vars=ua,va
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "acuaday       begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.25
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.25; }
     ${cmor} << EOF 1>>$out.25 2>>$err.25 || { echo "ERROR: $msg" >> $err.25; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 2
    /
    &CMORVARS
    VARTABIN(:,1) = "ua ","m s-1 ","    ","1,131        "
    VARTABIN(:,2) = "va ","m s-1 ","    ","1,132        "
    /
EOF
echo "acuaday       end  : $(date)" >> $tmpout
};)&
fi

#-- day, table 3, plevday, atmos (ta)
if [[ ${DoAllVarsC:-true} = true || ${actaday:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevday_dm_${year}$suff
 table=day; shape=plevday; realm=atmos; freq=day; chunk_range=""; vars=ta
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "actaday       begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.26
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.26; }
     ${cmor} << EOF 1>>$out.26 2>>$err.26 || { echo "ERROR: $msg" >> $err.26; exit 1; }
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     REC_NUM        =  ${RecDay}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 1
    /
    &CMORVARS
    VARTABIN(:,1) = "ta ","K"     ,"    ","1,130        "
   /
EOF
echo "actaday       end  : $(date)" >> $tmpout
};)&
fi

#-- 6hrPlev; plevsyn, atmos (ta)
if [[ ${DoAllVarsC:-true} = true || ${acta6hr:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevsyn_6hr_${year}$suff
 table=6hrPlev; shape=plevsyn; realm=atmos; freq=6hr; chunk_range=""; vars=ta
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "acta6hr       begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.27
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}12311800 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.27; }
     ${cmor} << EOF 1>>$out.27 2>>$err.27 || { echo "ERROR: $msg" >> $err.27; exit 1; } 
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     TIME_AXIS      = "time1"
     REC_NUM        =  ${Rec6hr}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 1
    /
    &CMORVARS
    VARTABIN(:,1)  = "ta     ","K"        ,"    ","1,130"
    /
EOF
echo "acta6hr       end  : $(date)" >> $tmpout
};
)&
fi

#-- 6hrPlev, plevsyn, atmos (ua va)
if [[ ${DoAllVarsC:-true} = true || ${acua6hr:-false} = true ]]; then

(ifile=input_cmor/${expid}_echam6_plevsyn_6hr_${year}$suff
 table=6hrPlev; shape=plevsyn; realm=atmos; freq=6hr; chunk_range=""; vars=ua,va
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
 echo "acua6hr       begin: $(date)" >> $tmpout
   msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.29
   c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
   [[ $outflag = replace ]] || {
     c5_find_chunk ${c5archdir} $expName $member \
       $freq ${realm} ${vars} ${prevyear}12311800 $res_mod $table chunk_range chk_msg
     echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.29; }
     ${cmor} << EOF 1>>$out.29 2>>$err.29 || { echo "ERROR: $msg" >> $err.29; exit 1; } 
     &CMORCTL
     INPUT_FILENAME = "${ifile}"
     CHUNK_RANGE    = "${chunk_range}"
     TABLE_NAME     = "${table}"
     REALM          = "${realm}"
     TIME_AXIS      = "time1"
     REC_NUM        =  ${Rec6hr}
     OUT_FLAG       = "${outflag}" 
     SHAPE          = "${shape}"
     ANZVARS        = 2
    /
    &CMORVARS
    VARTABIN(:,1)  = "ua     ","m s-1"    ,"    ","1,131"
    VARTABIN(:,2)  = "va     ","m s-1"    ,"    ","1,132"
    /
EOF
echo "acua6hr       end  :$(date)" >> $tmpout
};
)&
fi

#
#-- check for errors in CMOR processing of ECHAM output
#

wait
rm -f ERROR.ctl 
grep -v "could not rename   " ${err}.*    > ${err}.tmp || touch ${err}.tmp    
grep "ERROR:"                 ${err}.tmp  > ERROR.ctl  || touch ERROR.ctl 
grep "Error: Could not find " ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null
grep "Error: file mode can b" ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null
if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when CMOR processing ECHAM output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl; rm -f ${err}.tmp 
  POST_status=${POST_status:-""}"echam6:cmor"; exit 1
else
  printf "\n   |- No problems detected when CMOR processing ECHAM output.\n"
  rm -f ERROR.ctl $err.tmp $out $err
  touch $err.tmp $out $err
  for no in 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 19 \
                           22a 22b 23 24 25 26 27 28 29; do
    cat $err.${no}     >> $err.tmp 2>/dev/null  || echo No file 1>/dev/null
    cat $out.${no}     >> $out     2>/dev/null  || echo No file 1>/dev/null
    rm -f $out.${no} $err.${no}
  done
  grep -v "Definition of \"" $err.tmp >> $err
  rm CMORCONST.txt $err.tmp
  #-- grep CMOR value threshold messages/warnings
  thresh=tmpdir_post/${expid}.${atmmod}.cmor-threshold.${year}.txt
  grep "Warning: Invalid value(s) detected " $err > ${thresh} || status=$?
  if [[ $status = 0 ]] ; then
    printf "\n        |- No CMOR-threshold violations in ECHAM output.\n"
    rm -f $thresh
  else
    printf "\n        |- WARNING: CMOR-threshold violations in ECHAM output!\n"
  fi
fi

printf " \n#-- ECHAM: End of CMOR loadbalance at $(date)\n\n"    >> $tmpout
printf " \n#-- End of CMOR rewriting of ECHAM output at $(date)\n\n"  >> $err

fi


#################################################################################
#
#-- Processing of ECHAM output for CFMIP tables
#

. c5_cosp_request
c5_cosp_request $(echo ${startdate} | cut -c1-4) $expid locosp      ${off:-0}
c5_cosp_request $prevyear                        $expid locosp_prev ${off:-0}

#-- No COSP files generated for mpiesm-1.0.00
if [[ "${COSP}" = false ]]; then
  locosp=false
fi



if [[ ${locosp} = true && ${proc_cfmip:-no} = yes ]]; then

cp ${outdir}/CMORCONST.txt .

[[ -d tmpdir_post ]] || mkdir tmpdir_post

err=tmpdir_post/${expid}.${atmmod}.cfmip.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.${atmmod}.cfmip.${enddate}.out; rm -f ${out}*

printf "\n%s\n\n" \
       "#-- Start of CMOR rewriting of CFMIP variables at $(date)" > $err.00

tmpout=tmpdir_post/load_balance_cfmip.txt; rm -f $tmpout; touch $tmpout
printf "\n%s\n\n" "#-- CFMIP: Begin of loadbalance at $(date)" > $tmpout

MarcDirRoot=/work/bm0671/m300111/IMDI
MarcDirArch=$MarcDirRoot/archive/CMIP5/output/MPI-M/${esmmod}-${res_mod}/${expName}
MarcDirExp=$MarcDirRoot/experiments/${expName}_${member}-${res_mod}

#################################################################################
#

#
#-- copy model diagnostic output files from Marc's place 
#                                      to   blizzard 'expid'/oudata/echam6

if [[ ${DoAllVars:-true} = true || ${cfCpDiag:-false} = true ]]; then

 ([[ ${expid} = amip4xCO2_r1i1p1-LR || ${res_mod} = MR ]] || {
   srcDir=$MarcDirRoot/experiments/${expid}/outdata/echam6
   [[ -d $srcDir ]] || { echo "ERROR: $srcDir does not exist" > $err.01; exit 1; }
   diagnosticList="cosp cfdiag tdiagm"
   for diagnostic in $diagnosticList; do
     for mo in $Months; do
       cp -p $srcDir/${expid}_echam6_${diagnostic}_${year}${mo}.* .
       chmod 755 ${expid}_echam6_${diagnostic}_${year}${mo}.* 
       echo "INFO: Copied $srcDir/${expid}_echam6_${diagnostic}_${year}${mo}.*" \
            "to $(pwd)" >> $err.01
     done
   done; }
 )&

fi

#
#-- copy cmorized atomic data sets from Marc's results to blizzard tree
#

if [[ ${year} = ${iniyear}  && \
      ( ${DoAllVars:-true} = true || ${cfCpCmor:-false} = true ) ]]; then

 (echo "cfCpCmor     begin: $(date)" >> $tmpout
  freqList="mon day 3hr subhr"; touch $err.02
  for freq in $freqList; do
   srcDir=$MarcDirArch/$freq/atmos
   trgDir=$c5archdir/$freq/atmos
   varlist=$(ls -x $srcDir) 2>/dev/null || varlist=""
   for var in $varlist; do
    [[ -d $trgDir/$var/$member/ ]] 2>/dev/null || mkdir -p $trgDir/$var/$member
     fileList=$(ls -x $srcDir/$var/$member) || fileList=""
     for File in $fileList; do
        cp_File=yes
	[[ $freq = mon && "$(echo $File | cut -f2-2 -d"_")" != cfMon ]] && cp_File=no
        [[ $freq = day && "$(echo $File | cut -f2-2 -d"_")" != cfDay ]] && cp_File=no
        [[ $cp_File = yes ]] && {
         cp -p $srcDir/$var/$member/$File $trgDir/$var/$member
         echo "INFO: Copied $srcDir/$var/$member/$File" \
	   "to $trgDir/$var/$member" >> $err.02; }
     done
   done
  done
  echo "cfCpCmor      end  : $(date)" >> $tmpout
 )&

fi

#################################################################################
#
#-- monthly mean processing with CMOR: only 3D; only amip* and aqua* (CMIP5 prot)

if [[ ( ${DoAllVars:-true} = true  || ${cfMon:-false} = true  ) && \
      ( $expid             = amip* || $expid              = aqua* )     ]]; then

 #-- cfMon, alevel, atmos (ta hus)

 (echo "cfMon        begin: $(date)" >> $tmpout
  msg="#-- CFMIP mm code 130,133,134"; echo $msg > $err.03
  ofile=input_cmor/${expid}_${atmmod}_cfMon_130_133_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.03 2>> $err.03 \
     << EOF || { echo "ERROR: $msg" >> $err.03; exit 1; }
     &SELECT CODE=130,133,134,LEVEL=-1,
     FORMAT=1,INTERVAL=0,MEAN=1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm $ofile$mo$suff
  done
  ifile=$ofile$suff
  table=cfMon; shape=alevel; realm=atmos; freq=mon; chunk_range=""; vars=ta,hus
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03
  c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
  outflag=append; [[ $locosp_prev = T ]] && outflag=replace
  [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03; }
  ${cmor} << EOF 1>>$out.03 2>>$err.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 2 
   /
   &CMORVARS
   VARTABIN(:,1) = "ta ","K     ","    ","1,130"
   VARTABIN(:,2) = "hus","1     ","    ","1,133"
   /
EOF
  echo "cfMon         end  : $(date)" >> $tmpout
 )&

fi

#################################################################################
#
#-- daily mean processing with CMOR: 2D (all COSP experiments/intervals)
#

if [[ ${DoAllVars:-true} = true || ${cfDay2D:-false} = true ]]; then

 (echo "cfDay2D      begin: $(date)" >> $tmpout
  cl_cfDay_echam_agrid="134,143,146,147,150,164,176,177,179,184,185,186,187,188,
                        203,204,205,217,231"
  msg="#-- CMIP5 cfDay, agrid: ${cl_cfDay_echam_agrid}"; echo $msg > $err.04
  ofile=input_cmor/${expid}_echam6_agrid_dm_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.04; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.04 2>> $err.04 \
     << EOF || { echo "ERROR: $msg" >> $err.04; exit 1; }
     &SELECT CODE=${cl_cfDay_echam_agrid},FORMAT=1,INTERVAL=1,MEAN=1,
     LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done
  ifile=$ofile$suff
  table=cfDay; shape=agrid; realm=atmos; freq=day; chunk_range=""
  vars=ps,rsdt,rsut,rsdscs,rsuscs,rldscs,rlutcs,rsutcs,clt
  vars=${vars},clwvi,clivi,cct,prc,hfls,hfss,rlds,rlus,rsds,rsus,rlut
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.04
  outflag=append; [[ $locosp_prev = T ]] && outflag=replace
  [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.04; }
  ${cmor} << EOF 1>>$out.04 2>>$err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}" 
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 20 
   /
   &CMORVARS
   VARTABIN(:,01) ="rsdt   ","W m-2     ","down","1,184	       "
   VARTABIN(:,02) ="rsut   ","W m-2     ","up  ","1,203	       "
   VARTABIN(:,03) ="ps     ","Pa        ","    ","1,134        "
   VARTABIN(:,04) ="rsdscs ","W m-2     ","down","3,176,185,204"
   VARTABIN(:,05) ="rsuscs ","W m-2     ","up  ","3,176,185,204"
   VARTABIN(:,06) ="rldscs ","W m-2     ","down","2,186,205    "
   VARTABIN(:,07) ="rlutcs ","W m-2     ","up  ","1,188	       "
   VARTABIN(:,08) ="rsutcs ","W m-2     ","up  ","2,184,187    "
   VARTABIN(:,09) ="clt    ","%         ","    ","1,164	       "
   VARTABIN(:,10) ="clwvi  ","kg m-2    ","    ","1,231	       "
   VARTABIN(:,11) ="clivi  ","kg m-2    ","    ","1,150	       "
   VARTABIN(:,12) ="cct    ","Pa        ","    ","1,217	       "
   VARTABIN(:,13) ="prc    ","kg m-2 s-1","    ","1,143	       "
   VARTABIN(:,14) ="hfls   ","W m-2     ","up  ","1,147	       "
   VARTABIN(:,15) ="hfss   ","W m-2     ","up  ","1,146	       "
   VARTABIN(:,16) ="rlds   ","W m-2     ","down","2,177,205     "
   VARTABIN(:,17) ="rlus   ","W m-2     ","up  ","1,205	       "
   VARTABIN(:,18) ="rsds   ","W m-2     ","down","2,176,204    "
   VARTABIN(:,19) ="rsus   ","W m-2     ","up  ","1,204	       "
   VARTABIN(:,20) ="rlut   ","W m-2     ","up  ","1,179	       "
   /
EOF
  echo "cfDay2D       end  : $(date)" >> $tmpout
 )&

fi

#################################################################################
#
#-- daily mean processing with CMOR: 2D : wap, ta on pressure level
#                                         (all COSP experiments/intervals)

if [[ ${DoAllVars:-true} = true || ${cfDayWap500:-false} = true ]]; then

 (echo "cfDayWap500  begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, wap500: 135"; echo $msg > $err.05
  ofile=input_cmor/${expid}_echam6_wap500_dm_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.05; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.05 2>> $err.05 \
     << EOF || { echo "ERROR: $msg" >> $err.05; exit 1; }
     &SELECT CODE=135,FORMAT=1,INTERVAL=1,MEAN=1,
     LEVEL=50000,TYPE=30 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done
  ifile=$ofile$suff
  table=cfDay; shape=agrid; realm=atmos; freq=day; chunk_range=""; vars=wap500
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.05
  outflag=append; [[ $locosp_prev = T ]] && outflag=replace
  [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.05; }
  ${cmor} << EOF 1>>$out.05 2>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}" 
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1
   /
   &CMORVARS
   VARTABIN(:,01) ="wap500","Pa s-1","","1,135"
   /
EOF
  echo "cfDayWap500   end  : $(date)" >> $tmpout
 )&

fi

if [[ ${DoAllVars:-true} = true || ${cfDayTa700:-false} = true ]]; then

 (echo "cfDayTa700   begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, ta700: 130"; echo $msg > $err.06
  ofile=input_cmor/${expid}_echam6_ta700_dm_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.06; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.06 2>> $err.06 \
    << EOF || { echo "ERROR: $msg" >> $err.06; exit 1; }
    &SELECT CODE=130,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=70000,TYPE=30 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done
  ifile=$ofile$suff
  table=cfDay; shape=agrid; realm=atmos; freq=day; chunk_range=""; vars=ta700
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.06
  outflag=append; [[ $locosp_prev = T ]] && outflag=replace
  [[ $outflag = replace ]] || { 
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.06; }
  ${cmor} << EOF 1>>$out.06 2>>$err.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}" 
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 1
   /
   &CMORVARS
   VARTABIN(:,01) ="ta700","K","","1,130"
   /
EOF
  echo "cfDayTa700    end  : $(date)" >> $tmpout
 )&

fi

#################################################################################
#
#-- daily mean processing with CMOR: 3D
#

if [[  ( $expName = amip*       || $expName = aqua*     || $expName = 1pctCO2 || \
         $expName = abrupt4xCO2 || $expName = piControl ) && $year -ge 1970 &&   \
       ( ${DoAllVars:-true} = true || ${cfDay3D:-false} = true )      ]]; then

 (echo "cfDay3Dua    begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07a
  ofile=input_cmor/${expid}_echam6_alevel_dm_ua_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07a; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07a 2>> $err.07a \
    << EOF || { echo "ERROR: $msg" >> $err.07a; exit 1; }
    &SELECT CODE=131,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (ua)

  ifile=input_cmor/${expid}_echam6_alevel_dm_ua_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=ua
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07a
  ${cmor} << EOF 1>>$out.07a 2>>$err.07a || { echo "ERROR: $msg" >> $err.07a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "ua ","m s-1 ","    ","1,131"
   /
EOF
  echo "cfDay3Dua     end  : $(date)" >> $tmpout
 )&

 (echo "cfDay3Dva    begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07b
  ofile=input_cmor/${expid}_echam6_alevel_dm_va_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07b; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07b 2>> $err.07b \
    << EOF || { echo "ERROR: $msg" >> $err.07b; exit 1; }
    &SELECT CODE=132,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (va)

  ifile=input_cmor/${expid}_echam6_alevel_dm_va_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=va
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07b
  ${cmor} << EOF 1>>$out.07b 2>>$err.07b || { echo "ERROR: $msg" >> $err.07b; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "va ","m s-1 ","    ","1,132"
   /
EOF
  echo "cfDay3Dva     end  : $(date)" >> $tmpout
 )&


 (echo "cfDay3Dta    begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07c
  ofile=input_cmor/${expid}_echam6_alevel_dm_ta_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07c; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07c 2>> $err.07c \
    << EOF || { echo "ERROR: $msg" >> $err.07c; exit 1; }
    &SELECT CODE=130,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (ta)

  ifile=input_cmor/${expid}_echam6_alevel_dm_ta_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=ta
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07c
  ${cmor} << EOF 1>>$out.07c 2>>$err.07c || { echo "ERROR: $msg" >> $err.07c; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "ta ","K     ","    ","1,130"
   /
EOF
  echo "cfDay3Dta     end  : $(date)" >> $tmpout
 )&

 (echo "cfDay3Dhus   begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07d
  ofile=input_cmor/${expid}_echam6_alevel_dm_hus_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07d; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07d 2>> $err.07d \
    << EOF || { echo "ERROR: $msg" >> $err.07d; exit 1; }
    &SELECT CODE=133,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (hus)

  ifile=input_cmor/${expid}_echam6_alevel_dm_hus_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=hus
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07d
  ${cmor} << EOF 1>>$out.07d 2>>$err.07d || { echo "ERROR: $msg" >> $err.07d; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "hus","1     ","    ","1,133"
   /
EOF
  echo "cfDay3Dhus    end  : $(date)" >> $tmpout
 )&

 (echo "cfDay3Dwap   begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07e
  ofile=input_cmor/${expid}_echam6_alevel_dm_wap_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07e; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07e 2>> $err.07e \
    << EOF || { echo "ERROR: $msg" >> $err.07e; exit 1; }
    &SELECT CODE=135,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (wap)

  ifile=input_cmor/${expid}_echam6_alevel_dm_wap_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=wap
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07e
  ${cmor} << EOF 1>>$out.07e 2>>$err.07e || { echo "ERROR: $msg" >> $err.07e; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "wap","Pa s-1","    ","1,135"
   /
EOF
  echo "cfDay3Dwap    end  : $(date)" >> $tmpout
 )&


 (echo "cfDay3Dzg    begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07f
  ofile=input_cmor/${expid}_echam6_alevel_dm_zg_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07f; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07f 2>> $err.07f \
    << EOF || { echo "ERROR: $msg" >> $err.07f; exit 1; }
    &SELECT CODE=156,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (zg)

  ifile=input_cmor/${expid}_echam6_alevel_dm_zg_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=zg
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07f
  ${cmor} << EOF 1>>$out.07f 2>>$err.07f || { echo "ERROR: $msg" >> $err.07f; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "zg ","m     ","    ","1,156"
   /
EOF
  echo "cfDay3Dzg     end  : $(date)" >> $tmpout
 )&


 (echo "cfDay3Dhur   begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07g
  ofile=input_cmor/${expid}_echam6_alevel_dm_hur_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07g; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07g 2>> $err.07g \
    << EOF || { echo "ERROR: $msg" >> $err.07g; exit 1; }
    &SELECT CODE=157,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (hur)

  ifile=input_cmor/${expid}_echam6_alevel_dm_hur_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=hur
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07g
  ${cmor} << EOF 1>>$out.07g 2>>$err.07g || { echo "ERROR: $msg" >> $err.07g; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "hur","%     ","    ","1,157"
   /
EOF
  echo "cfDay3Dhur    end  : $(date)" >> $tmpout
 )&


 (echo "cfDay3Dcl    begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07h
  ofile=input_cmor/${expid}_echam6_alevel_dm_cl_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07h; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07h 2>> $err.07h \
    << EOF || { echo "ERROR: $msg" >> $err.07h; exit 1; }
    &SELECT CODE=223,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (cl)

  ifile=input_cmor/${expid}_echam6_alevel_dm_cl_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=cl
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07h
  ${cmor} << EOF 1>>$out.07h 2>>$err.07h || { echo "ERROR: $msg" >> $err.07h; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "cl ","%     ","    ","1,223"
   /
EOF
  echo "cfDay3Dcl     end  : $(date)" >> $tmpout
 )&

 (echo "cfDay3Dclw  begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07i
  ofile=input_cmor/${expid}_echam6_alevel_dm_clw_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07i; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07i 2>> $err.07i \
    << EOF || { echo "ERROR: $msg" >> $err.07i; exit 1; }
    &SELECT CODE=153,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (clw)

  ifile=input_cmor/${expid}_echam6_alevel_dm_clw_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=clw
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07i
  ${cmor} << EOF 1>>$out.07i 2>>$err.07i || { echo "ERROR: $msg" >> $err.07i; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "clw","1     ","    ","1,153"
   /
EOF
  echo "cfDay3Dclw    end  : $(date)" >> $tmpout
 )&


 (echo "cfDay3Dcli  begin: $(date)" >> $tmpout
  msg="#-- CMIP5 cfDay, alevel"; echo $msg > $err.07j
  ofile=input_cmor/${expid}_echam6_alevel_dm_cli_${year}
  rm -f $ofile$suff; touch $ofile$suff
  for mo in $Months; do
   ifile=${expid}_${atmmod}_echam_${year}$mo$suff 
   [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07j; exit 1; }
   ${afterburner} ${popt} $ifile $ofile$mo$suff 1>> $out.07j 2>> $err.07j \
    << EOF || { echo "ERROR: $msg" >> $err.07j; exit 1; }
    &SELECT CODE=154,134,FORMAT=1,INTERVAL=1,MEAN=1,
    LEVEL=-1,TYPE=20 &end
EOF
   cat $ofile$mo$suff >> $ofile$suff; rm  $ofile$mo$suff
  done

  #-- cfDay, alevel, atmos (cli)

  ifile=input_cmor/${expid}_echam6_alevel_dm_cli_${year}$suff
  table=cfDay; shape=alevel; realm=atmos; freq=day; chunk_range=""
  vars=cli
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07j
  ${cmor} << EOF 1>>$out.07j 2>>$err.07j || { echo "ERROR: $msg" >> $err.07j; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "cli","1     ","    ","1,154"
   /
EOF
  echo "cfDay3Dcli    end  : $(date)" >> $tmpout
 )&


fi

 
#
#-- check for errors in CMOR processing of CFMIP variables
#

wait
rm -f ERROR.ctl 
grep -v "could not rename   " ${err}.*    > ${err}.tmp || touch ${err}.tmp    
grep "ERROR:"                 ${err}.tmp  > ERROR.ctl  || touch ERROR.ctl 
grep "Error: Could not find " ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null
grep "Error: file mode can b" ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null
if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when processing CFMIP variables!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl; rm -f ${err}.tmp 
  POST_status=${POST_status:-""}"cfmip"; exit 1
else
  printf "\n   |- No problems detected when processing CFMIP variables.\n"
  rm -f ERROR.ctl $err.tmp $out $err
  touch $err.tmp $out $err
  for no in 00 01 02 03 04 05 06 07a 07b 07c 07d 07e 07f 07g 07h 07i 07j; do
    cat $err.${no}     >> $err.tmp 2>/dev/null  || echo No file 1>/dev/null
    cat $out.${no}     >> $out     2>/dev/null  || echo No file 1>/dev/null
    rm -f $out.${no} $err.${no}
  done
  grep -v "Definition of \"" $err.tmp >> $err
  rm CMORCONST.txt $err.tmp
  #-- grep CMOR value threshold messages/warnings
  thresh=tmpdir_post/${expid}.${atmmod}.cmor-cfmip-threshold.${year}.txt
  grep "Warning: Invalid value(s) detected " $err > ${thresh} || status=$?
  if [[ $status = 0 ]] ; then
    printf "\n        |- No CMOR-threshold violations in CFMIP variables.\n"
    rm -f $thresh
  else
    printf "\n        |- WARNING: CMOR-threshold violations in CFMIP variables!\n"
  fi
fi

printf " \n#-- CFMIP: End of loadbalance at $(date)\n\n" >> $tmpout
printf " \n#-- End of CMOR rewriting of CFMIP tables at $(date)\n\n"  >> $err

fi


################################################################################
#
#  Postprocessing of MPIOM output diagnostic files
#
################################################################################

cd ${outdir}/${ocemod}
[[ -d tmpdir_post ]] || { mkdir tmpdir_post; [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx tmpdir_post || true; }; }
[[ -d input_cmor  ]] || { mkdir input_cmor;  [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx input_cmor  || true; }; }

fmmsg="ERROR: Missing input file:"

suff=.${oce_out_filetype}

[[ $oce_src_revision -ge 4554 ]] && code149=correct

################################################################################
#
#-- cdo processing: do in parallel if possible

if [[ $post_proc_mpiom = yes ]]; then

err=tmpdir_post/${expid}.${ocemod}.post.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.${ocemod}.post.${enddate}.out; rm -f ${out}*
tmpout=tmpdir_post/load_balance_post.txt; rm -f $tmpout

printf "%s\n" "#-- Start of POST processing of MPIOM data at $(date)" > $err.00
printf "%s\n" "#-- MPIOM: Begin of POST loadbalance at $(date)" > $tmpout

if [[ $res_oce = GR15 && $vres_oce = 40 ]] || \
   [[ $res_oce = TP04 && $vres_oce = 40 ]]; then
  dz_l1=12
  tiestu_l1=6.
  lowerlevels="17.,27.,37.,47.,57.,68.5,82.5,100.,122.5,150.,182.5,220.,262.5"
  lowerlevels=${lowerlevels}",310.,362.5,420.,485.,560.,645.,740.,845.,960.,1085."
  lowerlevels=${lowerlevels}",1220.,1365.,1525.,1700.,1885.,2080.,2290.,2525."
  lowerlevels=${lowerlevels}",2785.,3070.,3395.,3770.,4195.,4670.,5170.,5720."
  alllevels="${tiestu_l1},${lowerlevels}"
else
  echo "ERROR:Ocean vertical grid characteristics not known!" >> $err.00; exit 1
fi

#-- offsets of code 518(zosga) and code 519(zossga)
#   Note: the offset for zostoga has to be calculated with Joerg's Program
#         for the first year(1850) of the respective control run.

if [[ ${DoAllVarsC:-true} = true || ${oczostoga:-false} = true ]]; then
[[ ${zostoga:-NotDef} = NotDef  ]] && {
   echo "ERROR: the reference value for zostoga is not set!"
   echo "       Set zostoga to zero. Rerun the first year and"
   echo "       search string 'blabla' in file 'datei'. Set zostoga "
   echo "       in all related setup files to that value."
   exit 1
} 
fi

([[ $zosga = 0.000 || $zossga = 0.000 ]] && {
 echo "opzosgafile   begin: $(date)" >> $tmpout
 [[ $jobnum = 1 ]] && {
   #-- compute offset for zosga and zossga in first year only
   msg="#-- CDO: prepare ascii file with zosga / zossga "; echo $msg > $err.00a
   [[ -f $zosgaFile ]] || { echo "$fmmsg $zosgaFile " >> $err.00a; exit 1; }
   ofile=../${expid}_${ocemod}_zosga-zossga_ym.txt
   $cdo infov -timmean -selcode,518,519 $zosgaFile \
     1> $ofile 2>>$out.00 || { echo "ERROR: $msg" >> $err.00a; exit 1; }
   }
 #-- write zosga and zossga into CMORCONST.txt; all years; if not set only
 ifile=../${expid}_${ocemod}_zosga-zossga_ym.txt
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.00a; exit 1; }
 zosga=$(grep gmsl_eu $ifile | cut -f5 -d":" | tr -d " " )
 zossga=$(grep gmsl_st $ifile | cut -f5 -d":" | tr -d " " )
 sed -e "/ZOSCONST/s/0.000,0.000/${zosga},${zossga}/" \
   ${outdir}/CMORCONST.txt > CMORCONST.new
 mv CMORCONST.new ${outdir}/CMORCONST.txt
 echo Sea level change offsets: ${zosga},${zossga} > $err.00a
 echo "opzosgafile   end  : $(date)" >> $tmpout
};)&

#-- compute fx table variables
if [[ ${DoAllVarsP:-true} = true || ${opfix:-false} = true ]]; then

([[ $jobnum = 1 ]] && {
 echo "opfix         begin: $(date)" >> $tmpout
 msg="#-- CDO: processing for table fx, ogrid"; echo $msg > $err.01
 ifile=${expid}_${ocemod}_data_fx$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.01; exit 1; }
 $cdo selcode,84 $ifile fx_depth \
   1>>$err.01 2>>$out.01 || { echo "ERROR:1 $msg" >> $err.01; exit 1; }
 $cdo selcode,85 $ifile fx_dx \
   1>>$err.01 2>>$out.01 || { echo "ERROR:3 $msg" >> $err.01; exit 1; }
 $cdo selcode,86 $ifile fx_dy \
   1>>$err.01 2>>$out.01 || { echo "ERROR:4 $msg" >> $err.01; exit 1; }
 $cdo -mul fx_dx fx_dy fx_area \
   1>>$err.01 2>>$out.01 || { echo "ERROR:5 $msg" >> $err.01; exit 1; }
 $cdo sellevel,6 -selcode,172  $ifile fx_mask \
   1>>$err.01 2>>$out.01 || { echo "ERROR:7 $msg" >> $err.01; exit 1; }
 rm -f  ../fx_ogrid$suff
 $cdo merge fx_mask fx_area fx_depth ../fx_ogrid$suff \
   1>>$err.01 2>>$out.01 || { echo "ERROR:8 $msg" >> $err.01; exit 1; }
 msg="#-- CDO: processing for table fx, olevel"; echo $msg > $err.01
 ifile=${expid}_${ocemod}_data_fx$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.01; exit 1; }
 $cdo selcode,197 $ifile file197 \
  1>>$err.01 2>>$out.01 || { echo "ERROR:9 $msg" >> $err.01; exit 1; }
 $cdo setvar,volcello -mul fx_mask -addc,${dz_l1} -mulc,0.0 \
  -sellevel,${tiestu_l1} file197 dz_upper \
  1>>$err.01 2>>$out.01 || { echo "ERROR:10 $msg" >> $err.01; exit 1; }
 $cdo setvar,volcello -sellevel,${lowerlevels} file197 dz_lower \
  1>>$err.01 2>>$out.01 || { echo "ERROR:11 $msg" >> $err.01; exit 1; }
 rm -f fx_dz
 $cdo merge dz_upper dz_lower fx_dz \
  1>>$err.01 2>>$out.01 || { echo "ERROR:12 $msg" >> $err.01; exit 1; }
 $cdo mul fx_dz fx_area ../fx_olevel$suff  \
  1>>$err.01 2>>$out.01 || { echo "ERROR:13 $msg" >> $err.01; exit 1; }
 mv file197 fx_dz dz_upper dz_lower fx_area tmpdir_post
 mv fx_mask fx_depth fx_dx fx_dy            tmpdir_post
 msg="#-- CDO: processing for table fx, mfo"; echo $msg > $err.01
 $cdo partab ${expid}_${ocemod}_timeser_dm_${startdate}_${enddate}$suff   \
   > ../partab 2>/dev/null
 $cdo mul -selcode,184 $mpiom_fx -selcode,186 $mpiom_fx ../dayz.nc \
   1>>$err.01 2>>$out.01 || { echo "ERROR:14 $msg" >> $err.01; exit 1; }
 $cdo mul -selcode,187 $mpiom_fx -selcode,188 $mpiom_fx ../daxz.nc \
   1>>$err.01 2>>$out.01 || { echo "ERROR:15 $msg" >> $err.01; exit 1; }
 for sec in $(seq 1 15);do
 (
   usec=$(echo "100 + ${sec}"|bc)
   vsec=$(echo "200 + ${sec}"|bc)
   $cdo setctomiss,0 -mul ../dayz.nc -eqc,${usec} -selvar,secmapu \
    $mpiom_fx dayz_${sec}.nc \
    1>>$err.01 2>>$out.01 || { echo "ERROR:16 $msg" >> $err.01; exit 1; }
   $cdo setctomiss,0 -mul ../daxz.nc -eqc,${vsec} -selvar,secmapv \
    $mpiom_fx daxz_${sec}.nc  \
    1>>$err.01 2>>$out.01 || { echo "ERROR:17 $msg" >> $err.01; exit 1; }
  )&
 done
 wait
 mv daxz*.nc dayz*.nc   ../
 echo "opfix         end  : $(date)" >> $tmpout
})&

[[ ! $jobnum = 1 ]] || wait

fi

#-- compute climatological values of diffusivity/viscosity (Oclim)
if [[ ${DoAllVarsP:-true} = true || ${opclim:-false} = true ]]; then

(echo "opclim        begin: $(date)" >> $tmpout
 if [[ $expName = historical ]]; then
  if [[ $year -ge $fOclimYr && $year -le $lOclimYr ]]; then
    msg="#-- CDO: annual processing for  Oclim"; echo $msg > $err.02
    ofile=tmpdir_post/${expid}_${ocemod}_Oclim_${year}$suff
    ifile=${expid}_${ocemod}_data_3dw_mm_${startdate}_${enddate}$suff
    [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02; exit 1; }
    $cdo selcode,110,111 $ifile $ofile 1>>$err.02 2>>$out.02 || {
      echo "ERROR:1 $msg" >> $err.02; exit 1; }
  fi
  if [[ $year = $lOclimYr ]]; then
    msg="#-- CDO: last year processing for Oclim"; echo $msg > $err.02
    fileaccu=tmpdir_post/${expid}_${ocemod}_Oclim_accu$suff
    rm -f $fileaccu; 
    cp tmpdir_post/${expid}_${ocemod}_Oclim_${lOclimYr}$suff $fileaccu; 
    yr=$fOclimYr
    while [[ $yr -lt $lOclimYr ]]; do
      ifile=tmpdir_post/${expid}_${ocemod}_Oclim_${yr}$suff
      [[ -f $ifile ]] || { echo "$fmmsg $ifile ($yr)" >> $err.02; exit 1; }
      msg="#-- CDO: add $yr for Oclim"; echo $msg > $err.02
      $cdo add $ifile $fileaccu accufile \
      1>>$err.02 2>>$out.02 || { echo "ERROR:2 $msg" >> $err.02; exit 1; }
      mv -f accufile $fileaccu  
      yr=$(expr $yr + 1)
    done
    msg="#-- CDO: divide for Oclim"; echo $msg > $err.02
    fact=$(expr $lOclimYr - $fOclimYr + 1)
    ofile=input_cmor/${expid}_${ocemod}_Oclim$suff
    $cdo divc,$fact $fileaccu ${ofile}.tmp \
     1>>$err.02 2>>$out.02 || { echo "ERROR:4 $msg" >> $err.02; exit 1; }
    $cdo setyear,$fOclimYr -setday,15 ${ofile}.tmp ${ofile}			\
     1>>$err.02 2>>$out.02 || { echo "ERROR:4 $msg" >> $err.02; exit 1; }
    echo "Oclim variables have been processed at $startdate" >> $err.02
  fi
fi
echo "opclim        end  : $(date)" >> $tmpout
)&
fi

#-- compute monthly mean from daily mean: opoint
if [[ ${DoAllVarsP:-true} = true || ${oppoint1:-false} = true ]]; then

(echo "oppoint1      begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_timeser_dm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
 ofile=${expid}_${ocemod}_Omon_opoint_${startdate}_${enddate}.nc
 msg="#-- CDO: select codes       opoint "; echo $msg > $err.03
 $cdo selcode,513,514,515,516,518,519,703 $ifile file21_${year} \
  1>>$err.03 2>>$out.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
 msg="#-- CDO: monmean            opoint "; echo $msg > $err.03
 $cdo monmean file21_${year} $ofile \
  1>>$err.03 2>>$out.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
 rm file21_${year}
echo "oppoint1      end  : $(date)" >> $tmpout
)&
fi

#-- compute Fram Strait sea ice transport (for transifs)
if [[ ${DoAllVarsP:-true} = true || ${optransifs:-false} = true ]]; then

(echo "optransifs    begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03a; exit 1; }
 ofile=${expid}_${ocemod}_Omon_transifs_${startdate}_${enddate}.nc
 msg="#-- CDO: transifs "; echo $msg > $err.03a
 if [[ $res_mod = MR ]]; then
   $cdo setcode,703 -fldsum -selvar,transiy -selindexbox,595,613,28,28 $ifile $ofile \
    1>>$err.03a 2>>$out.03a || { echo "ERROR: $msg" >> $err.03a; exit 1; }
 elif [[ $res_mod = LR || $res_mod = P ]]; then
   $cdo fldsum -selvar,transix -selindexbox,226,226,35,45 $ifile summ1.nc \
    1>>$err.03a 2>>$out.03a || { echo "ERROR: $msg" >> $err.03a; exit 1; }
   $cdo fldsum -selvar,transiy -selindexbox,216,226,45,45 $ifile summ2.nc \
    1>>$err.03a 2>>$out.03a || { echo "ERROR: $msg" >> $err.03a; exit 1; }
   $cdo setcode,703 -add summ1.nc summ2.nc $ofile \
    1>>$err.03a 2>>$out.03a || { echo "ERROR: 3: $msg" >> $err.03a; exit 1; }
 else
   echo "ERROR: transifs: Ocean grid not possible." >> $err.03a; exit 1;
 fi
echo "optransifs    end  : $(date)" >> $tmpout
)&

fi


#-- compute monthly mean from daily mean: yzbasin
if [[ ${DoAllVarsP:-true} = true || ${opyzbasin:-false} = true ]]; then

(echo "opyzbasin     begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_timeser_dm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.04; exit 1; }
 ofile=${expid}_${ocemod}_Omon_yzbasin_${startdate}_${enddate}$suff
 msg="#-- CDO: select codes        basin"; echo $msg > $err.04
 $cdo monmean -selcode,100,101,102 $ifile $ofile \
  1>>$err.04 2>>$out.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
echo "opyzbasin     end  : $(date)" >> $tmpout
)&

fi

#-- compute monthly mean from daily mean: ybasin
if [[ ${DoAllVarsP:-true} = true || ${opybasin:-false} = true ]]; then

(echo "opybasin      begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_timeser_dm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.05; exit 1; }
 ofile=${expid}_${ocemod}_Omon_ybasin_${startdate}_${enddate}$suff
 msg="#-- CDO: select codes       ybasin"; echo $msg > $err.05
 $cdo monmean -selcode,93,94,95,96,97,98 $ifile $ofile \
  1>>$err.05 2>>$out.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
echo "opybasin      end  : $(date)" >> $tmpout
)&

fi


#-- select var tho,sao and zo for: zostoga
if [[ ${DoAllVarsP:-true} = true || ${opzostoga:-false} = true ]]; then

(echo "opzostoga     begin: $(date)" >> $tmpout
 ifile1=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}.nc
 ifile2=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}.nc
 [[ -f ${ifile1}  &&  -f ${ifile2} ]] || \
  { echo " $fmmsg ${ifile1} ${ifile2} " >> $err.05z; exit 1; }
 ofile=./input_cmor/${expid}_${ocemod}_Omon_zostoga_${startdate}_${enddate}$suff
 [[ -f ${ofile} ]] &&  rm ${ofile}
 msg="#-- CDO: select codes  for zostoga"; echo $msg > $err.05z
 $cdo selvar,tho,sao $ifile1 zostoga_tmp1 \
  1>>$err.05z 2>>$out.05z || { echo "ERROR: 1 $msg" >> $err.05z; exit 1; }
 $cdo selvar,zo $ifile2 zostoga_tmp2 \
  1>>$err.05z 2>>$out.05z || { echo "ERROR: 2 $msg" >> $err.05z; exit 1; }
 $cdo merge zostoga_tmp1 zostoga_tmp2 $ofile \
  1>>$err.05z 2>>$out.05z || { echo "ERROR: 3 $msg" >> $err.05z; exit 1; }
 rm zostoga_tmp1 zostoga_tmp2 \
  1>>$err.05z 2>>$out.05z || { echo "ERROR: 3 $msg" >> $err.05z; exit 1; }
echo "opzostoga     end  : $(date)" >> $tmpout
)&
fi


#-- compute monthly mean from daily mean and merge into 1 grid: oline
if [[ ${DoAllVarsP:-true} = true || ${opmfo:-false} = true ]]; then

(echo "opmfo         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.06; exit 1; }
 ofile=${expid}_${ocemod}_Omon_oline_${startdate}_${enddate}$suff
 msg="#-- CDO: select codes        oline"; echo $msg > $err.06
 cdo -selvar,uko ${ifile} uko.nc \
  1>>$err.06 2>>$out.06 || { echo "ERRORuko: $msg" >> $err.06; exit 1; }
 cdo -selvar,vke ${ifile} vke.nc \
  1>>$err.06 2>>$out.06 || { echo "ERRORvke: $msg" >> $err.06; exit 1; }
 for sec in $(seq 1 15); do
  (
   usec=$(echo "100 + ${sec}"|bc)
   vsec=$(echo "200 + ${sec}"|bc)
   cdno=$(echo "602 + ${sec}*10"|bc)
   if [ ${sec} -eq  7 ] ; then ; lev=15 ; else ; lev=40 ; fi
   $cdo -vertsum -sellevidx,1/${lev} -mul uko.nc \
   ../dayz_${sec}.nc tru.cdf.$sec \
   1>>$err.06 2>>$out.06 || { echo "ERROR1: $msg" >> $err.06; exit 1; }
   $cdo -vertsum -sellevidx,1/${lev} -mul vke.nc \
   ../daxz_${sec}.nc trv.cdf.$sec \
    1>>$err.06 2>>$out.06 || { echo "ERROR2: $msg" >> $err.06; exit 1; }
   $cdo -eqc,0 -setmisstoc,0 -fldsum tru.cdf.$sec umiss.$sec \
    1>>$err.06 2>>$out.06 || { echo "ERROR3: $msg" >> $err.06; exit 1; } 
   $cdo -eqc,0 -setmisstoc,0 -fldsum trv.cdf.$sec vmiss.$sec \
    1>>$err.06 2>>$out.06 || { echo "ERROR4: $msg" >> $err.06; exit 1; } 
   $cdo -setpartab,../partab -setcode,${cdno} -mulc,1025 -ifthenelse -eq umiss.$sec vmiss.$sec \
        -add -fldsum tru.cdf.$sec -fldsum trv.cdf.$sec -add -fldsum -setmisstoc,0 tru.cdf.$sec \
	-fldsum -setmisstoc,0 trv.cdf.$sec tr_${sec}.cdf \
    1>>$err.06 2>>$out.06 || { echo "ERROR5: $msg" >> $err.06; exit 1; }
    ) &
  done
  wait
   $cdo merge tr_*.cdf ${ofile}_tmp \
     1>>$err.06 2>>$out.06 || { echo "ERROR6: $msg" >> $err.06; exit 1; } 
   $cdo -f grb -setcode,1 \
    -chlevelc,612,0,1  -chlevelc,622,0,2  -chlevelc,632,0,3  \
    -chlevelc,642,0,4  -chlevelc,652,0,5  -chlevelc,662,0,6  \
    -chlevelc,672,0,7  -chlevelc,682,0,8  -chlevelc,692,0,9  \
    -chlevelc,702,0,10 -chlevelc,712,0,11 -chlevelc,722,0,12 \
    -chlevelc,732,0,13 -chlevelc,742,0,14 -chlevelc,752,0,15  ${ofile}_tmp $ofile \
     1>>$err.06 2>>$out.06 || { echo "ERROR7: $msg" >> $err.06; exit 1; }
   rm -f tr_*.cdf* [uv]miss.* uko.nc vke.nc tr[uv].cdf*  \
     1>>$err.06 2>>$out.06 || { echo "ERRORrm: $msg" >> $err.06; exit 1; }
echo "opmfo         end  : $(date)" >> $tmpout
)&

fi

#-- extend hfsithermds to all ocean levels
if [[ ${DoAllVarsP:-true} = true || ${ophfsithermds:-false} = true ]]; then

[[ ${code149:-wrong} = correct ]] && {
(echo "ophfsithermds begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff 
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07; exit 1; }
 ofile=${expid}_${ocemod}_Omon_hfsithermds_${startdate}_${enddate}$suff
 msg="#-- CDO: select code 149      "; echo $msg > $err.07
 $cdo chlevel,0,6 -selcode,149 $ifile hfsithermds_1_${year} \
  1>>$err.07 2>>$out.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
 msg="#-- CDO: create 3d file       "; echo $msg > $err.07
 ifile1=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}$suff 
 [[ -f $ifile1 ]] || { echo "$fmmsg $ifile1 " >> $err.07; exit 1; }
 $cdo selcode,5 ${ifile1} hfsithermds_4_${year} \
  1>>$err.07 2>>$out.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
 $cdo sub hfsithermds_4_${year} hfsithermds_4_${year} hfsithermds_2_${year} \
  1>>$err.07 2>>$out.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
 msg="#-- CDO: select lower levels  "; echo $msg > $err.07
 $cdo chcode,5,149 -chname,sao,hfsithermds -sellevel,$lowerlevels \
  hfsithermds_2_${year} hfsithermds_3_${year} \
  1>>$err.07 2>>$out.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
 msg="#-- CDO: merge srf and lower  "; echo $msg > $err.07
 rm -f $ofile
 $cdo merge hfsithermds_1_${year} hfsithermds_3_${year} $ofile \
  1>>$err.07 2>>$out.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
 mv hfsithermds_1_${year} hfsithermds_2_${year} hfsithermds_3_${year} \
    hfsithermds_4_${year} tmpdir_post
echo "ophfsithermds end  : $(date)" >> $tmpout
)&
}
fi

#-- select 182 (monthly mean of daily max of mixed layer depth )
if [[ ${DoAllVarsP:-true} = true || ${opmldamax:-false} = true ]]; then

(echo "opmldamax     begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_dm_${startdate}_${enddate}$suff 
 ofile=${expid}_${ocemod}_Omon_omldamax_${startdate}_${enddate}$suff
 msg="#-- CDO: select code 182      Omon "; echo $msg > $err.08
 $cdo monmean -selcode,182 $ifile $ofile \
  1>>$err.08 2>>$out.08 || { echo "ERROR: $msg" >> $err.08; exit 1; }
echo "opmldamax     end  : $(date)" >> $tmpout
)&
fi

#-- select 182 (monthly max of mixed layer depth )
if [[ ${DoAllVarsP:-true} = true || ${opmlmax:-false} = true ]]; then

(echo "opomlmax      begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_dm_${startdate}_${enddate}$suff 
 ofile=${expid}_${ocemod}_Omon_omlmax_${startdate}_${enddate}$suff
 msg="#-- CDO: select code 182      Omon "; echo $msg > $err.09
 $cdo monmax -selcode,182 $ifile $ofile \
  1>>$err.09 2>>$out.09 || { echo "ERROR: $msg" >> $err.09; exit 1; }
echo "opomlmax      end  : $(date)" >> $tmpout
)&
fi

#
#-- check for POST processing errors in MPIOM output processing
#

wait
rm -f ERROR.ctl
grep -v "Confusing string" ${err}.*    > ${err}.tmp || touch ${err}.tmp    
grep "ERROR: "             ${err}.tmp  > ERROR.ctl  || touch ERROR.ctl 
grep "Some other string"   ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when POST processing MPIOM output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl; rm -f ${err}.tmp
  POST_status=${POST_status:-""}"mpiom:post"; exit 1
else
  printf "\n   |- No problems detected when POST processing MPIOM output.\n"
  rm -f ERROR.ctl ${err}.tmp
  for no in 00 00a 01 02 03 03a 04 05 06 07 08 09 ; do
    cat $err.${no} >> $err 2>/dev/null || echo No file 1>/dev/null
    cat $out.${no} >> $out 2>/dev/null || echo No file 1>/dev/null
    rm -f $err.${no} $out.${no}
  done
  printf "\n   |- Moving input for CMOR processing into directory input_cmor.\n"
  for table in Omon ; do
    mv -f ${expid}_*_${table}_*_${startdate}_${enddate}.* input_cmor 2>/dev/null || true
  done
fi

printf "#-- End of POST processing of MPIOM output at $(date)\n"    >> $err
printf "%s\n" "#-- MPIOM: End of POST loadbalance at $(date)" >> $tmpout

fi
#
################################################################################

################################################################################
#
#-- CMOR rewriting of MPIOM output
#

if [[ $cmor_proc_mpiom = yes ]]; then

cp ${outdir}/CMORCONST.txt .

err=tmpdir_post/${expid}.mpiom.cmor.${enddate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.mpiom.cmor.${enddate}.out; rm -f ${out}*
printf "\n#-- Start of CMOR rewriting of MPIOM output at $(date)\n\n"  > $err

tmpout=tmpdir_post/load_balance_cmor.txt; rm -f $tmpout
printf "\n#-- MPIOM: Begin of CMOR loadbalance $(date)\n\n"   > $tmpout

#-- check for code availability

code128=not_avail
$cdo selcode,128 ${expid}_mpiom_data_2d_mm_${startdate}_${enddate}.nc \
                 tmpdir_post/code128_testfile 2>> $err.01 && { code128=avail; }

################################################################################
#
#-- CMOR processing of variables requested at the start of each experiment
#

#-- table fx; first run only
if [[ ${DoAllVarsC:-true} = true || ${ocfix:-false} = true ]]; then

([[ $jobnum = 1 ]] && {
echo "ocfix         begin: $(date)" >> $tmpout
 table=fx; realm=ocean; freq=fx
 shape=ogrid; vars=areacello,deptho,sftof
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.01
 ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "../fx_ogrid$suff"
   CHUNK_RANGE    = ""
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  1
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  3
   /
   &CMORVARS
   VARTABIN(:,1) = "areacello","m2","","1,085"
   VARTABIN(:,2) = "deptho   ","m ","","1,084"   
   VARTABIN(:,3) = "sftof    ","% ","","1,172"
   /
EOF
 shape=olevel; vars=volcello
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg >> $err.01
 ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "../fx_olevel$suff"
   CHUNK_RANGE    = ""
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  1
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1) = "volcello","m3"," ","1,172"
   /
EOF
echo "ocfix         end  : $(date)" >> $tmpout
})&

fi

#
#-- CMOR processing of variables always requested (no call of c5_request)
#

#-- Omon 2.2, opoint ( masso volo thetaoga soga )
if [[ ${DoAllVarsC:-true} = true || ${ocmasso:-false} = true ]]; then

(echo "ocmasso       begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_opoint_${startdate}_${enddate}.nc
 table=Omon; shape=opoint; realm=ocean; freq=mon; chunk_range=""
 vars=masso,volo,thetaoga,soga
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.02
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.02; }
 ${cmor} << EOF 1>>$out.02 2>>$err.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  4
   /
   &CMORVARS
   VARTABIN(:,1) = "masso   ","kg ","","1,514"
   VARTABIN(:,2) = "volo    ","m3 ","","1,513"
   VARTABIN(:,3) = "thetaoga","K  ","","1,515"
   VARTABIN(:,4) = "soga    ","psu","","1,516"
   /
EOF
echo "ocmasso       end  : $(date)" >> $tmpout
)&

fi
#-- Omon 2.2, opoint ( zosga zossga )
if [[ ${DoAllVarsC:-true} = true || ${oczosga:-false} = true ]]; then

(echo "oczosga       begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_opoint_${startdate}_${enddate}.nc
 table=Omon; shape=opoint; realm=ocean; freq=mon; chunk_range=""
 vars=zosga,zossga
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.02
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.02; }
 ${cmor} << EOF 1>>$out.02 2>>$err.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2
   /
   &CMORVARS
   VARTABIN(:,1) = "zosga   ","m  ","","2,519,518"
   VARTABIN(:,2) = "zossga  ","m  ","","1,518"
   /
EOF
echo "oczosga       end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.2, opoint ( zostoga )
if [[ ${DoAllVarsC:-true} = true || ${oczostoga:-false} = true ]]; then

(echo "oczostoga     begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_zostoga_${startdate}_${enddate}$suff
 table=Omon; shape=opoint; realm=ocean; freq=mon; chunk_range=""
 vars=zostoga
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.02z
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.02z; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.02z; }
 ${cmor} << EOF 1>>$out.02z 2>>$err.02z || { echo "ERROR: $msg" >> $err.02z; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ZOSTOGA_CONST  = ${zostoga}
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1) = "zostoga  ","m  ","","3,002,005,001"
   /
EOF
echo "oczostoga     end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.2 ogrid ( omldamax )
if [[ ${DoAllVarsC:-true} = true || ${ocomldamax:-false} = true ]]; then

(echo "ocomldamax    begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_omldamax_${startdate}_${enddate}$suff
 table=Omon; shape=ogrid; realm=ocean; freq=mon; chunk_range=""
 vars=omldamax
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03; }
 ${cmor} << EOF 1>>$out.03 2>>$err.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "omldamax ","m","","1,182"
   /
EOF
echo "ocomldamax    end  : $(date)" >> $tmpout
)&
fi

#-- Omon 2.2 ogrid ( omlmax )
if [[ ${DoAllVarsC:-true} = true || ${ocomlmax:-false} = true ]]; then

(echo "ocomlmax      begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_omlmax_${startdate}_${enddate}$suff
 table=Omon; shape=ogrid; realm=ocean; freq=mon; chunk_range=""
 vars=omlmax
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03a
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03a; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03a; }
 ${cmor} << EOF 1>>$out.03a 2>>$err.03a || { echo "ERROR: $msg" >> $err.03a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1)  = "omlmax ","m","","1,182"
   /
EOF
echo "ocomlmax      end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.2, 2.5, 2.6, 2.7 ogrid
#       ( pbo zos zossq tos tossq sos msftbarot mlotst mlotstsq; tbd sfdsi) 
if [[ ${DoAllVarsC:-true} = true || ${ocpbo:-false} = true ]]; then

(echo "ocpbo         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff
 table=Omon; shape=ogrid; realm=ocean; freq=mon; chunk_range=""
 vars=pbo,zos,zossq,tos,tossq,sos,msftbarot,mlotst,mlotstsq
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03b
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03b; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03b; }
 ${cmor} << EOF 1>>$out.03b 2>>$err.03b || { echo "ERROR: $msg" >> $err.03b; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  9
   /
   &CMORVARS
   VARTABIN(:,1)  = "pbo      ","dbar      ","","1,017"
   VARTABIN(:,2)  = "zos      ","m         ","","1,001"
   VARTABIN(:,3)  = "zossq    ","m2        ","","1,011"
   VARTABIN(:,4)  = "tos      ","K         ","","1,012"
   VARTABIN(:,5)  = "tossq    ","K2        ","","1,014"
   VARTABIN(:,6)  = "sos      ","psu       ","","1,016"
   VARTABIN(:,7)  = "msftbarot","kg s-1    ","","1,027"
   VARTABIN(:,8)  = "mlotst   ","m         ","","1,183"
   VARTABIN(:,9)  = "mlotstsq ","m2        ","","1,181"
   /
EOF
echo "ocpbo         end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.3 ogrid
#       ( hfx,hfy,hfxba,hfyba,hfxdiff,hfydiff; tbd: fsitherm )
if [[ ${DoAllVarsC:-true} = true || ${ochfx:-false} = true ]]; then

[[ ${code128} = avail ]] && {
(echo "ochfx         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff
 table=Omon; shape=ogrid; realm=ocean; freq=mon; chunk_range=""
 vars=hfx,hfy,hfxba,hfyba,hfxdiff,hfydiff
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03c
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03c; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03c; }
 ${cmor} << EOF 1>>$out.03c 2>>$err.03c || { echo "ERROR: $msg" >> $err.03c; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  6
   /
   &CMORVARS
   VARTABIN(:,1) = "hfx      ","W         ","","3,127,125,123"
   VARTABIN(:,2) = "hfy      ","W         ","","3,128,126,124"
   VARTABIN(:,3) = "hfxba    ","W         ","","1,127"
   VARTABIN(:,4) = "hfyba    ","W         ","","1,128"
   VARTABIN(:,5) = "hfxdiff  ","W         ","","1,125"
   VARTABIN(:,6) = "hfydiff  ","W         ","","1,126"
   /
EOF
echo "ochfx         end  : $(date)" >> $tmpout
)&
}

fi

#
#-- Omon 2.2, olevel (  thkcello thetao ; tbd: masscello )
#               
if [[ ${DoAllVarsC:-true} = true || ${octhkcello:-false} = true ]]; then

(echo "octhkcello    begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}$suff
 table=Omon; shape=olevel; realm=ocean; freq=mon; chunk_range=""
 vars=thkcello,thetao
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.04
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.04; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.04; }
 ${cmor} << EOF 1>>$out.04 2>>$err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2
   /
   &CMORVARS
   VARTABIN(:,1)  ="thkcello","m      ","    ","1,197 "
   VARTABIN(:,2)  ="thetao  ","K      ","    ","1,002 "
   /
EOF
echo "octhkcello    end  : $(date)" >> $tmpout
)&

fi

#
#-- Omon 2.2, olevel (  so rhopoto; tbd: masscello )
#               
if [[ ${DoAllVarsC:-true} = true || ${ocso:-false} = true ]]; then

(echo "ocso          begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}$suff
 table=Omon; shape=olevel; realm=ocean; freq=mon; chunk_range=""
 vars=so,rhopoto
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.04a
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.04a; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.04a; }
 ${cmor} << EOF 1>>$out.04a 2>>$err.04a || { echo "ERROR: $msg" >> $err.04a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2
   /
   &CMORVARS
   VARTABIN(:,1)  ="so      ","psu    ","    ","1,005 "
   VARTABIN(:,2)  ="rhopoto ","kg m-3 ","    ","1,018 "
   /
EOF
echo "ocso          end  : $(date)" >> $tmpout
)&

fi

#
#-- Omon 2.3, ybasin  # noch keine variablen im mpiom ouput
#       ( tbd: htovgyre htovovrt sltovgyre sltovovrt hfbasin hfbasinba hfbasindiff)
#


#-- Omon 2.3, yzbasin ( msftmyz )
if [[ ${DoAllVarsC:-true} = true || ${ocmsftmyz:-false} = true ]]; then

(echo "ocmsftmyz     begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_yzbasin_${startdate}_${enddate}$suff
 table=Omon; shape=yzbasin; realm=ocean; freq=mon; chunk_range=""; vars=msftmyz
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.05
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.05; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.05; }
 ${cmor} << EOF 1>>$out.05 2>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1 
   /
   &CMORVARS
   VARTABIN(:,1)  ="msftmyz","kg s-1","","3,100,101,102"    
   /
EOF
echo "ocmsftmyz     end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.3, olevel ( uo vo )
if [[ ${DoAllVarsC:-true} = true || ${ocuo:-false} = true ]]; then

(echo "ocuo          begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}$suff
 table=Omon; shape=olevel; realm=ocean; freq=mon; chunk_range=""
 vars=uo,vo
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.06
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.06; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.06; }
 ${cmor} << EOF 1>>$out.06 2>>$err.06 || { echo "ERROR: $msg" >> $err.06; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2 
   /
   &CMORVARS
   VARTABIN(:,1)  ="uo   ","m s-1  ","","1,003"
   VARTABIN(:,2)  ="vo   ","m s-1  ","","1,004"
   /
EOF
echo "ocuo          end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.3, olevel ( umo vmo)
if [[ ${DoAllVarsC:-true} = true || ${ocumo:-false} = true ]]; then

(echo "ocumo         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_3du_mm_${startdate}_${enddate}$suff
 table=Omon; shape=olevel; realm=ocean; freq=mon; chunk_range=""; vars=umo,vmo
 codeumo="023"; codevmo="024"
 [[ $oce_src_revision -lt 5048 ]] && codeumo="003"
 [[ $oce_src_revision -lt 5048 ]] && codevmo="004"
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.06a
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.06a; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.06a; }
 ${cmor} << EOF 1>>$out.06a 2>>$err.06a || { echo "ERROR: $msg" >> $err.06a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2 
   /
   &CMORVARS
   VARTABIN(:,1)  ="umo  ","kg s-1 ","","1,$codeumo"
   VARTABIN(:,2)  ="vmo  ","kg s-1 ","","1,$codevmo"
   /
EOF
echo "ocumo         end  : $(date)" >> $tmpout
)&

fi


#-- Omon 2.3, olevel ( wmo wmosq )
if [[ ${DoAllVarsC:-true} = true || ${ocwmo:-false} = true ]]; then

(echo "ocwmo         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_3dw_mm_${startdate}_${enddate}$suff
 table=Omon; shape=wlevel; realm=ocean; freq=mon; chunk_range=""
 vars=wmo,wmosq
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.09 
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.09; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.09; }
 ${cmor} << EOF 1>>$out.09 2>>$err.09 || { echo "ERROR: $msg" >> $err.09; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  2 
   /
   &CMORVARS
   VARTABIN(:,1)  ="wmo  ","kg s-1 ","","1,021"
   VARTABIN(:,2)  ="wmosq","kg2 s-2","","1,022"
   /
EOF
echo "ocwmo         end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.4, oline ( mfo )
if [[ ${DoAllVarsC:-true} = true || ${ocmfo:-false} = true ]]; then

(echo "ocmfo         begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_oline_${startdate}_${enddate}$suff
 table=Omon; shape=oline; realm=ocean; freq=mon; chunk_range=""
 vars=mfo
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.07
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.07; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.07; }
 ${cmor} << EOF 1>>$out.07 2>>$err.07 || { echo "ERROR: $msg" >> $err.07; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1 
   /
   &CMORVARS
   VARTABIN(:,1)  ="mfo   ","kg s-1   ","    ","1,001 "
   /
EOF
echo "ocmfo         end  : $(date)" >> $tmpout
)&

fi

#-- Omon 2.7, olevel ( hfsithermds; 3 dimensional)
if [[ ${DoAllVarsC:-true} = true || ${ochfsithermds:-false} = true ]]; then

[[ ${code149:-wrong} = correct ]] && {
(echo "ochfsithermds begin: $(date)" >> $tmpout
ifile=input_cmor/${expid}_${ocemod}_Omon_hfsithermds_${startdate}_${enddate}$suff
 table=Omon; shape=olevel; realm=ocean; freq=mon; chunk_range=""
 vars=hfsithermds
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.08
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.08; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.08; }
   ${cmor} << EOF 1>>$out.08 2>>$err.08 || { echo "ERROR: $msg" >> $err.08; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1) = "hfsithermds","W m-2","    ","1,149"
   /
EOF
echo "ochfsithermds end  : $(date)" >> $tmpout
)& 
}
fi

#-- Omon 2.8, ogrid; coupling fields
#       ( tauuo tauvo wfo rsntds)
if [[ ${DoAllVarsC:-true} = true || ${ocwfo:-false} = true ]]; then

(echo "ocwfo         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff
 table=Omon; shape=ogrid; realm=ocean; freq=mon; chunk_range=""
 vars=tauuo,tauvo,wfo,rsntds
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.10
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.10; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.10; }
   ${cmor} <<EOF 1>>$out.10 2>>$err.10 || { echo "ERROR: $msg" >> $err.10; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        = 4 
   /
   &CMORVARS
   VARTABIN(:,1) = "wfo      ","kg m-2 s-1","    ","2,219,220    "
   VARTABIN(:,2) = "rsntds   ","W m-2     ","down","2,015,223    "
   VARTABIN(:,3) = "tauuo    ","N m-2     ","down","3,015,215,228" 
   VARTABIN(:,4) = "tauvo    ","N m-2     ","down","3,015,216,229"
   /
EOF
echo "ocwfo         end  : $(date)" >> $tmpout
)&

fi
#-- Omon 2.8, ogrid; coupling fields (hfds)
if [[ ${DoAllVarsC:-true} = true || ${ochfds:-false} = true ]]; then

(echo "ochfds        begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff
 table=Omon; shape=ogrid; realm=ocean; freq=mon; chunk_range=""
 vars=hfds
 hfds_text="MPI-M only: This is the net heat flux  entering "
 hfds_text=${hfds_text}"the liquid-water/sea-ice column through its upper surface"
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.10a
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.10a; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.10a; }
 ${cmor} <<EOF 1>>$out.10a 2>>$err.10a || { echo "ERROR: $msg" >> $err.10a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   VAR_COMMENT    = "${hfds_text}"
   ANZVARS        = 1 
   /
   &CMORVARS
   VARTABIN(:,1) = "hfds     ","W m-2     ","down","1,070        "
   /
EOF
echo "ochfds        end  : $(date)" >> $tmpout
)&

fi

#-- OImon, opoint ( transifs )
if [[ ${DoAllVarsC:-true} = true || ${octransifs:-false} = true ]]; then

(echo "octransifs    begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Omon_transifs_${startdate}_${enddate}.nc
 table=OImon; shape=opoint; realm=seaIce; freq=mon; chunk_range=""; vars=transifs
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.11
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.11; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.11; }
 ${cmor} << EOF 1>>$out.11 2>>$err.11 || { echo "ERROR: $msg" >> $err.11; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  1
   /
   &CMORVARS
   VARTABIN(:,1) = "transifs","kg s-1","","1,703"
   /
EOF
echo "octransifs    end  : $(date)" >> $tmpout
)&

fi

#-- OImon, ogrid ( sic sit snd transix transiy )
if [[ ${DoAllVarsC:-true} = true || ${ocsic:-false} = true ]]; then

(echo "ocsic         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff
 table=OImon; shape=ogrid; realm=seaIce; freq=mon; chunk_range=""
 vars=sic,sit,snd,transix,transiy,prsn,sim
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.12
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.12; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.12; }
 ${cmor} << EOF 1>>$out.12 2>>$err.12 || { echo "ERROR: $msg" >> $err.12; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  7
   /
   &CMORVARS
   VARTABIN(:,1) = "sic    ","%         ","  ","1,015"
   VARTABIN(:,2) = "sit    ","m         ","  ","1,013"
   VARTABIN(:,3) = "snd    ","m         ","  ","1,141"
   VARTABIN(:,4) = "transix","kg s-1    ","  ","1,138"
   VARTABIN(:,5) = "transiy","kg s-1    ","  ","1,139"
   VARTABIN(:,6) = "prsn   ","kg m-2 s-1","  ","1,220"
   VARTABIN(:,7) = "sim    ","kg m-2    ","  ","2,013,141"
   /
EOF
echo "ocsic         end  : $(date)" >> $tmpout
)&

fi

#-- OImon ( strairx strairy strocnx strocny )
if [[ ${DoAllVarsC:-true} = true || ${ocstrairx:-false} = true ]]; then

(echo "ocstrairx     begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_mm_${startdate}_${enddate}$suff
 table=OImon; shape=ogrid; realm=seaIce; freq=mon; chunk_range=""
 vars=strairx,strairy,strocnx,strocny
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.13
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.13; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.13; }
 ${cmor} << EOF 1>>$out.13 2>>$err.13 || { echo "ERROR: $msg" >> $err.13; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecMo}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  4
   /
   &CMORVARS
   VARTABIN(:,1) = "strairx","N m-2","down","2,226,015"
   VARTABIN(:,2) = "strairy","N m-2","down","2,227,015"
   VARTABIN(:,3) = "strocnx","N m-2","    ","2,228,015"
   VARTABIN(:,4) = "strocny","N m-2","    ","2,229,015"
   /
EOF
echo "ocstrairx     end  : $(date)" >> $tmpout
)&

fi

#-- day, ogrid ( tossq tos omldamax )
if [[ ${DoAllVarsC:-true} = true || ${octos:-false} = true ]]; then

(echo "octos         begin: $(date)" >> $tmpout
 ifile=${expid}_${ocemod}_data_2d_dm_${startdate}_${enddate}$suff
 table=day; shape=ogrid; realm=ocean; freq=day; chunk_range=""
 vars=tossq,tos,omldamax
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.14
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.14; exit 1; }
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.14; }
   ${cmor} << EOF 1>>$out.14 2>>$err.14 || { echo "ERROR: $msg" >> $err.14; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   ANZVARS        =  3
   /
   &CMORVARS
   VARTABIN(:,1) = "tos     ","K ","","1,012"
   VARTABIN(:,2) = "tossq   ","K2","","1,014"
   VARTABIN(:,3) = "omldamax","m ","","1,182"
   /
EOF
echo "octos         end  : $(date)" >> $tmpout
)&

fi

#################################################################################
#
#-- CMOR processing of variables not always requested
#


#-- CMOR processing of climatological parameters: table Oclim (historical 1986-2005)
#        ( difvho difvso difvmo; tbd: difvtrbo iftrelo difmxybo )
if [[ ${DoAllVarsC:-true} = true || ${ocdifvho:-false} = true ]]; then

([[ $expName = historical && $year = $lOclimYr ]] && {
echo "ocdifvho      begin: $(date)" >> $tmpout
 ifile=input_cmor/${expid}_${ocemod}_Oclim$suff
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.15; exit 1; }
 table=Oclim; shape=wlevel; realm=ocean; freq=monClim
 vars=difvho,difvso,difvmo
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.15
 ${cmor} << EOF 1>>$out.15 2>>$err.15 || { echo "ERROR: $msg" >> $err.15; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = ""
   TIME_AXIS      = "time2"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  12
   OUT_FLAG       = "replace" 
   SHAPE          = "${shape}"
   CLIMYEAR       = ${fOclimYr}0101,${lOclimYr}1231
   ANZVARS        =  3
   /
   &CMORVARS
   VARTABIN(:,1)  ="difvho","m2 s-1","","1,111"
   VARTABIN(:,2)  ="difvmo","m2 s-1","","1,110"
   VARTABIN(:,3)  ="difvso","m2 s-1","","1,111"
   /
EOF
echo "ocdifvho      end  : $(date)" >> $tmpout
};)&
fi

#-- day, ogrid ( usi,vsi,sic,sit)
if [[ ${DoAllVarsC:-true} = true || ${ocsicday:-false} = true ]]; then

(ifile=${expid}_${ocemod}_data_2d_dm_${startdate}_${enddate}$suff
 table=day; shape=ogrid; realm=seaIce; freq=day; chunk_range=""
 c5_request $year $expName $realisation $table $shape requested ${res_mod}
 [[ $requested = no ]] || {
  echo "ocsicday      begin:  $(date)" >> $tmpout
  vars=usi,vsi,sic,sit
  msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.16
  [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.16; exit 1; }
  c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
  [[ $outflag = replace ]] || {
  c5_find_chunk ${c5archdir} $expName $member \
   $freq ${realm} ${vars} ${prevyear}1231 $res_mod $table chunk_range chk_msg
  echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.16; }
 var_comment="Ice velocities are not reported as missing in ice free cells"
 var_comment="${var_comment} since mass and velocities are not defined at the same points"
 ${cmor} << EOF 1>>$out.16 2>>$err.16 || { echo "ERROR: $msg" >> $err.16; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        =  ${RecDay}
   OUT_FLAG       = "${outflag}" 
   SHAPE          = "${shape}"
   VAR_COMMENT    = "${var_comment}"
   ANZVARS        =  4
   /
   &CMORVARS
   VARTABIN(:,1) = "sic","%    ","  ","1,015"
   VARTABIN(:,2) = "sit","m    ","  ","1,013"
   VARTABIN(:,3) = "usi","m s-1","  ","2,037,015"
   VARTABIN(:,4) = "vsi","m s-1","  ","2,038,015"
   /
EOF
 echo "ocsicday      end  :  $(date)" >> $tmpout
} )&
fi

#
#-- check for CMOR errors in MPIOM output processing
#

wait
rm -f ERROR.ctl
grep "ERROR:"                ${err}.*  > ERROR.ctl || touch ERROR.ctl 
grep "Error: Could not find" ${err}.* >> ERROR.ctl || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when CMOR processing MPIOM output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl
  POST_status=${POST_status:-""}"mpiom:cmor"; exit 1
else
  printf "\n   |- No problems detected in CMOR processing of MPIOM output.\n"
  rm -f ERROR.ctl $err.tmp $out $err
  touch $err.tmp $out $err
  for no in 01 02 03 03a 03b 03c 04 04a 05 06 06a 07 08 \
                                09 10 10a 11 12 13 14 15 16 ; do
    cat $err.${no}     >> $err.tmp 2>/dev/null  || echo No file 1>/dev/null
    cat $out.${no}     >> $out     2>/dev/null  || echo No file 1>/dev/null
    rm -f $out.${no} $err.${no}
  done
  grep -v "Definition of " $err.tmp > $err || touch ${err}
  rm -f CMORCONST.txt $err.tmp
  #-- grep CMOR value threshold messages/warnings
  thresh=${outdir}/${ocemod}/${expid}.${ocemod}.cmor-threshold.${year}.txt; rm -f $thresh
  grep "Warning: Invalid value(s) detected " $err > ${thresh} || status=$?
  if [[ -s $thresh ]] ; then
    printf "\n        |- WARNING: CMOR-threshold violations in MPIOM output!\n"
  else
    printf "\n        |- No CMOR-threshold violations in MPIOM output.\n"
    rm -f $thresh
  fi
fi

printf " \n#-- End of CMOR rewriting of MPIOM output at $(date)\n\n"  >> $err
printf " \n#-- MPIOM: End of CMOR loadbalance at $(date)\n\n"  >> $tmpout
 

fi
###############################################################################

###############################################################################
#
#  Postprocessing of HAMOCC output diagnostic files
#
###############################################################################

cd ${outdir}/${bgcmod}
[[ -d tmpdir_post ]] || { mkdir tmpdir_post; [[ ${groupwrite:-no} = no ]] || {
                          chmod g+wx tmpdir_post || true; }; }

fmmsg="ERROR: Missing input file:"

[[ "$vres_bgc" != "" ]] || vres_bgc=$vres_oce

#################################################################################
#
#-- cdo processing: do in parallel if possible

if [[ $post_proc_hamocc = yes ]]; then

err=tmpdir_post/${expid}.post.${nextdate}.err; rm -f ${err}*
out=tmpdir_post/${expid}.post.${nextdate}.out; rm -f ${out}*
printf "%s\n" "#-- Start of POST processing of HAMOCC data at $(date)" > $err.00

#-- nothing to be  done

#
#-- check for POST processing errors in HAMOCC output processing
#

wait
rm -f ERROR.ctl
grep -v "Confusing string" ${err}*     > ${err}.tmp || touch ${err}.tmp
grep "ERROR:"              ${err}.tmp  > ERROR.ctl  || touch ERROR.ctl
grep "Some other string"   ${err}.tmp >> ERROR.ctl  || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when POST processing HAMOCC output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl; rm -f ${err}.tmp
  POST_status=${POST_status:-""}"hamocc:post"; exit 1
else
  printf "\n   |- No problems detected when POST processing HAMOCC output.\n"
  rm -f ERROR.ctl ${err}.tmp
  for no in 00 ; do
    cat $err.${no} >> $err 2>/dev/null || echo No file 1>/dev/null
    cat $out.${no} >> $out 2>/dev/null || echo No file 1>/dev/null
    rm -f $err.${no} $out.${no}
  done
fi

printf "\n#-- End of POST processing of HAMOCC output at $(date)\n"  >> $err

fi

#
#################################################################################

#################################################################################
#
#-- CMOR rewriting of HAMOCC output
#

if [[ $cmor_proc_hamocc = yes && $expid != decadal* && ${res_mod} != P ]] ; then

cp ${outdir}/CMORCONST.txt .

err=${outdir}/${bgcmod}/${expid}.${bgcmod}.cmor.${enddate}.err; rm -f ${err}*
out=${outdir}/${bgcmod}/${expid}.${bgcmod}.cmor.${enddate}.out; rm -f ${out}*
printf "\n#-- Start of CMOR rewriting of HAMOCC output at $(date)\n\n"  > $err.00

tmpout=tmpdir_post/load_balance_cmor.txt; rm -f $tmpout
printf "\n#-- HAMOCC: Begin of CMOR loadbalance at $(date)\n\n"  > $tmpout


#################################################################################
#
#-- CMOR processing of variables always requested (no call of c5_request)
#

#
#-- Oyr table 1  olevel, ocnBgchem
#       (dissic dissoc phyc zooc detoc calc talk ph o2 no3 po4 dfe \
#       si chl pon pop bfe bsi phyn phyp phyfe dms co3 co3satcalc dcalc)
#               
if [[ ${DoAllVarsC:-true} = true || ${hc3dym:-false} = true ]]; then

(echo "hc3dym        begin: $(date)" >> $tmpout
 ifile=${expid}_${bgcmod}_data_3d_ym_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.01; exit 1; }
 table=Oyr ; shape=olevel; realm=ocnBgchem; freq=yr; chunk_range=""
 vars=dissic,dissoc,phyc,zooc,detoc,calc,talk,ph,o2,no3,po4,dfe
 vars=${vars},si,chl,pon,pop,bfe,bsi,phyn,phyp,phyfe,dms,co3,co3satcalc,dcalc
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.01
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear} $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.01; }
 ${cmor} << EOF 1>>$out.01 2>>$err.01 || { echo "ERROR: $msg" >> $err.01; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = 1 
   OUT_FLAG       = "${outflag}"
   SHAPE          = "${shape}"
   ANZVARS        = 25
   /
   &CMORVARS
   VARTABIN(:,1)  ="dissic    ","mol m-3","","1,007"         
   VARTABIN(:,2)  ="dissoc    ","mol m-3","","1,016"        
   VARTABIN(:,3)  ="phyc      ","mol m-3","","1,022"         
   VARTABIN(:,4)  ="zooc      ","mol m-3","","1,023"         
   VARTABIN(:,5)  ="detoc     ","mol m-3","","1,017"         
   VARTABIN(:,6)  ="calc      ","mol m-3","","1,024"         
   VARTABIN(:,7)  ="talk      ","mol m-3","","1,010"         
   VARTABIN(:,8)  ="ph        ","","","1,020"                
   VARTABIN(:,9)  ="o2        ","mol m-3","","1,012"         
   VARTABIN(:,10)  ="no3       ","mol m-3","","1,014"         
   VARTABIN(:,11)  ="po4       ","mol m-3","","1,011"        
   VARTABIN(:,12)  ="dfe       ","mol m-3","","1,031"         
   VARTABIN(:,13)  ="si        ","mol m-3","","1,015"         
   VARTABIN(:,14)  ="chl       ","kg m-3 ","","1,022"        
   VARTABIN(:,15)  ="pon       ","mol m-3","","3,022,023,017" 
   VARTABIN(:,16)  ="pop       ","mol m-3","","3,022,023,017" 
   VARTABIN(:,17)  ="bfe       ","mol m-3","","3,022,023,017" 
   VARTABIN(:,18)  ="bsi       ","mol m-3","","1,027"         
   VARTABIN(:,19)  ="phyn      ","mol m-3","","1,022"         
   VARTABIN(:,20)  ="phyp      ","mol m-3","","1,022"         
   VARTABIN(:,21)  ="phyfe     ","mol m-3","","1,022"        
   VARTABIN(:,22)  ="dms       ","mol m-3","","1,029"         
   VARTABIN(:,23)  ="co3       ","mol m-3","","1,021"         
   VARTABIN(:,24)  ="co3satcalc","mol m-3","","1,037"          
   VARTABIN(:,25)  ="dcalc     ","mol m-3 s-1","","1,158"
  /
EOF
echo "hc3dym        end  : $(date)" >> $tmpout
)&

fi

#
#-- Oyr table 2 olevel (pp pbfe pbsi pcalc graz)
#
if [[ ${DoAllVarsC:-true} = true || ${hc100mym:-false} = true ]]; then

(echo "hc100mym      begin: $(date)" >> $tmpout
ifile=${expid}_${bgcmod}_data_0-100m_ym_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " > $err.02; exit 1; }
 table=Oyr ; shape=olevel; realm=ocnBgchem; freq=yr; chunk_range=""
 vars=pp,pbfe,pbsi,pcalc,graz
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg >> $err.02
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear} $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.02; }
 ${cmor} << EOF 1>>$out.02 2>>$err.02 || { echo "ERROR: $msg" >> $err.02; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = 1
   OUT_FLAG       = "${outflag}"
   SHAPE          = "${shape}"
   ANZVARS        = 5
   /
   &CMORVARS
   VARTABIN(:,1)  ="pp             ","mol m-3 s-1    ","    ","1,100"
   VARTABIN(:,2)  ="pbfe           ","mol m-3 s-1    ","    ","1,100"
   VARTABIN(:,3)  ="pbsi           ","mol m-3 s-1    ","    ","1,086"
   VARTABIN(:,4)  ="pcalc          ","mol m-3 s-1    ","    ","1,085" 
   VARTABIN(:,5)  ="graz           ","mol m-3 s-1    ","    ","1,101" 
   /
EOF
echo "hc100mym      end  : $(date)" >> $tmpout
)&

fi

#
#-- Omon table 1 ogrid surface fields of Oyr table 1 
#     (dissic dissoc phyc zooc detoc calc talk ph o2 no3 po4 dfe 
#      si chl pon pop bfe bsi phyn phyp phyfe dms co3)
#
if [[ ${DoAllVarsC:-true} = true || ${hc2dmm1:-false} = true ]]; then

(echo "hc2dmm1       begin: $(date)" >> $tmpout
ifile=${expid}_${bgcmod}_data_2d_mm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03; exit 1; }
 table=Omon; shape=ogrid; realm=ocnBgchem; freq=mon; chunk_range=""
 vars=dissic,dissoc,phyc,zooc,detoc,calc,talk
 vars=${vars},ph,o2,no3,po4,dfe
 vars=${vars},si,chl,pon,pop,bfe,bsi
 vars=${vars},phyn,phyp,phyfe,dms,co3
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03; }
 ${cmor} << EOF 1>>$out.03 2>>$err.03 || { echo "ERROR: $msg" >> $err.03; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = $RecMo
   OUT_FLAG       = "${outflag}"
   SHAPE          = "${shape}"
   ANZVARS        = 23
   /
   &CMORVARS
   VARTABIN(:,1)  = "dissic    ","mol m-3","    ","1,107"         
   VARTABIN(:,2)  = "dissoc    ","mol m-3","    ","1,116"         
   VARTABIN(:,3)  = "phyc      ","mol m-3","    ","1,122"         
   VARTABIN(:,4)  = "zooc      ","mol m-3","    ","1,123"         
   VARTABIN(:,5)  = "detoc     ","mol m-3","    ","1,117"         
   VARTABIN(:,6)  = "calc      ","mol m-3","    ","1,124"         
   VARTABIN(:,7)  = "talk      ","mol m-3","    ","1,110"         
   VARTABIN(:,8)  = "ph        ","       ","    ","1,120"         
   VARTABIN(:,9)  = "o2        ","mol m-3","    ","1,112"         
   VARTABIN(:,10) = "no3       ","mol m-3","    ","1,114"         
   VARTABIN(:,11) = "po4       ","mol m-3","    ","1,111"         
   VARTABIN(:,12) = "dfe       ","mol m-3","    ","1,131"         
   VARTABIN(:,13) = "si        ","mol m-3","    ","1,115"         
   VARTABIN(:,14) = "chl       ","kg m-3","     ","1,122"         
   VARTABIN(:,15) = "pon       ","mol m-3","    ","3,122,123,117" 
   VARTABIN(:,16) = "pop       ","mol m-3","    ","3,122,123,117" 
   VARTABIN(:,17) = "bfe       ","mol m-3","    ","3,122,123,117" 
   VARTABIN(:,18) = "bsi       ","mol m-3","    ","1,127"         
   VARTABIN(:,19) = "phyn      ","mol m-3","    ","1,122"        
   VARTABIN(:,20) = "phyp      ","mol m-3","    ","1,122"       
   VARTABIN(:,21) = "phyfe     ","mol m-3","    ","1,122"      
   VARTABIN(:,22) = "dms       ","mol m-3","    ","1,129"     
   VARTABIN(:,23) = "co3       ","mol m-3","    ","1,121"
   /
EOF
echo "hc2dmm1       end  : $(date)" >> $tmpout
)&

fi

#
#-- Omon table 1 ogrid surface fields of Oyr table 1 (co3satcalc)
#
if [[ ${DoAllVarsC:-true} = true || ${hcco3satcalc:-false} = true ]]; then

(echo "hcco3satcalc  begin: $(date)" >> $tmpout
ifile=${expid}_${bgcmod}_data_2d_mm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " >> $err.03a; exit 1; }
 table=Omon; shape=ogrid; realm=ocnBgchem; freq=mon; chunk_range=""
 vars=co3satcalc
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg > $err.03a
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.03a; }
 ${cmor} << EOF 1>>$out.03a 2>>$err.03a || { echo "ERROR: $msg" >> $err.03a; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = $RecMo
   OUT_FLAG       = "${outflag}"
   SHAPE          = "${shape}"
   ANZVARS        = 1
   /
   &CMORVARS
   VARTABIN(:,1)  = "co3satcalc","mol m-3","    ","1,137"
   /
EOF
echo "hcco3satcalc  end  : $(date)" >> $tmpout
)&

fi

#
#-- Omon table 1 ogrid (intpp,intpbfe,intpbsi,intpcalc,intdic,spco2,
#                       dpco2,dpo2,fgco2,fgo2,fgdms,frc,intpn2,frn,
#                       fsfe,frfe,o2min,zo2min,zsatcalc)
if [[ ${DoAllVarsC:-true} = true || ${hc2dmm2:-false} = true ]]; then

(echo "hc2dmm2       begin: $(date)" >> $tmpout
ifile=${expid}_${bgcmod}_data_2d_mm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " > $err.04; exit 1; }
 table=Omon; shape=ogrid; realm=ocnBgchem; freq=mon; chunk_range=""
 vars=intpp,intpbfe,intpbsi,intpcalc,intdic,spco2,dpco2,dpo2,fgco2,fgo2
 vars=${vars},fgdms,frc,intpn2,frn,fsfe,frfe,o2min,zo2min,zsatcalc
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg >> $err.04
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.04; }
 ${cmor} << EOF 1>>$out.04 2>>$err.04 || { echo "ERROR: $msg" >> $err.04; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = $RecMo
   OUT_FLAG       = "${outflag}"
   SHAPE          = "${shape}"
   ANZVARS        = 19
   /
   &CMORVARS
   VARTABIN(:,1)  = "intpp          ","mol m-2 s-1    ","    ","1,200        "
   VARTABIN(:,2)  = "intpbfe        ","mol m-2 s-1    ","    ","1,200        "
   VARTABIN(:,3)  = "intpbsi        ","mol m-2 s-1    ","    ","1,186        "
   VARTABIN(:,4)  = "intpcalc       ","mol m-2 s-1    ","    ","1,185        "
   VARTABIN(:,5)  = "intdic         ","kg m-2         ","    ","1,206        "
   VARTABIN(:,6)  = "spco2          ","Pa             ","    ","1,067        "
   VARTABIN(:,7)  = "dpco2          ","Pa             ","    ","1,164        "
   VARTABIN(:,8)  = "dpo2           ","Pa             ","    ","1,165        "
   VARTABIN(:,9)  = "fgco2          ","kg m-2 s-1     ","down","1,092        "
   VARTABIN(:,10) = "fgo2           ","mol m-2 s-1    ","down","1,072        "
   VARTABIN(:,11) = "fgdms          ","mol m-2 s-1    ","down","1,068        "
   VARTABIN(:,12) = "frc            ","mol m-2 s-1    ","down","2,094,095    " 
   VARTABIN(:,13) = "intpn2         ","mol m-2 s-1    ","    ","1,157        "
   VARTABIN(:,14) = "frn            ","mol m-2 s-1    ","    ","2,094,159    " 
   VARTABIN(:,15)  ="fsfe           ","mol m-2 s-1    ","down","1,161        "
   VARTABIN(:,16)  ="frfe           ","mol m-2 s-1    ","down","1,094        "
   VARTABIN(:,17)  ="o2min          ","mol m-3        ","    ","1,162        "
   VARTABIN(:,18)  ="zo2min         ","m              ","    ","1,163        "
   VARTABIN(:,19)  ="zsatcalc       ","m              ","    ","1,160        "
   /
EOF
echo "hc2dmm2       end  : $(date)" >> $tmpout
)&

fi

#
#-- Omon table 1 (epc100 epfe100 epsi100 epcalc100
#                 fddtdic fddtdin fddtdip fddtdife fddtdisi fddtalk)
if [[ ${DoAllVarsC:-true} = true || ${hc2dmm3:-false} = true ]]; then

(echo "hc2dmm3       begin: $(date)" >> $tmpout
ifile=${expid}_${bgcmod}_data_2d_mm_${startdate}_${enddate}.nc
 [[ -f $ifile ]] || { echo "$fmmsg $ifile " > $err.05; exit 1; }
 table=Omon; shape=ogrid; realm=ocnBgchem; freq=mon; chunk_range=""
 vars=epc100,epfe100,epsi100,epcalc100,fddtdic,fddtdin,fddtdip,fddtdife,fddtdisi,fddtalk
 c5_outflag $inidate $findate $year $expName $res_mod $freq $shape outflag
 msg="#-- CMOR: $table $shape $realm $vars, ..."; echo $msg >> $err.05
 [[ $outflag = replace ]] || {
   c5_find_chunk ${c5archdir} $expName $member \
     $freq ${realm} ${vars} ${prevyear}12 $res_mod $table chunk_range chk_msg
   echo "Chunk search for ${vars}(${outflag}): ${chk_msg}" >> $err.05; }
 ${cmor} << EOF 1>>$out.05 2>>$err.05 || { echo "ERROR: $msg" >> $err.05; exit 1; }
   &CMORCTL
   INPUT_FILENAME = "${ifile}"
   CHUNK_RANGE    = "${chunk_range}"
   TABLE_NAME     = "${table}"
   REALM          = "${realm}"
   REC_NUM        = $RecMo
   OUT_FLAG       = "${outflag}"
   SHAPE          = "${shape}"
   ANZVARS        = 10
   /
   &CMORVARS
   VARTABIN(:,1)  = "epc100         ","mol m-2 s-1    ","down","1,081        "
   VARTABIN(:,2)  = "epfe100        ","mol m-2 s-1    ","down","1,081        "
   VARTABIN(:,3)  = "epsi100        ","mol m-2 s-1    ","down","1,075        "
   VARTABIN(:,4)  = "epcalc100      ","mol m-2 s-1    ","down","1,078        "
   VARTABIN(:,5)  = "fddtdic        ","mol m-2 s-1    ","    ","1,207        "
   VARTABIN(:,6)  = "fddtdin        ","mol m-2 s-1    ","    ","1,214        "
   VARTABIN(:,7)  = "fddtdip        ","mol m-2 s-1    ","    ","1,211        "
   VARTABIN(:,8)  = "fddtdife       ","mol m-2 s-1    ","    ","1,231        "
   VARTABIN(:,9)  = "fddtdisi       ","mol m-2 s-1    ","    ","1,215        "
   VARTABIN(:,10) = "fddtalk        ","mol m-2 s-1    ","    ","1,210        "
   /
EOF
echo "hc2dmm3       end  : $(date)" >> $tmpout
)&
fi

#
#-- check for CMOR errors in HAMOCC output processing
#

wait
rm -f ERROR.ctl
grep "ERROR:"                ${err}.*  > ERROR.ctl || touch ERROR.ctl
grep "Error: Could not find" ${err}.* >> ERROR.ctl || echo "" 1>/dev/null

if [[ -s ERROR.ctl ]]; then
  printf "\n${b}ERRORS ${n}detected when CMOR processing HAMOCC output!\n"
  printf "\n     ERROR messages:\n"
  cat ERROR.ctl
  POST_status=${POST_status:-""}"hamocc:cmor"; exit 1
else
  printf "\n   |- No problems detected in CMOR processing of HAMOCC output.\n"
  rm -f ERROR.ctl $err.tmp $out $err
  touch $err.tmp $out $err
  for no in 00 01 02 03 03a 04 05; do
    cat $err.${no}     >> $err.tmp 2>/dev/null  || echo No file 1>/dev/null
    cat $out.${no}     >> $out     2>/dev/null  || echo No file 1>/dev/null
    rm -f $out.${no} $err.${no}
  done
  grep -v "Definition of " $err.tmp > $err || touch ${err}
  rm -f CMORCONST.txt $err.tmp
  #-- grep CMOR value threshold messages/warnings
  thresh=${outdir}/${bgcmod}/${expid}.${bgcmod}.cmor-threshold.${year}.txt
  grep "Warning: Invalid value(s) detected " $err > ${thresh} || status=$?
  if [[ $status = 0 ]] ; then
    printf "\n        |- No CMOR-threshold violations in HAMOCC output.\n"
    rm -f $thresh
  else
    printf "\n        |- WARNING: CMOR-threshold violations in HAMOCC output!\n"
  fi
fi

printf "\n#-- HAMOCC: End of CMOR loadbalance at $(date)\n\n"  >> $tmpout
printf " \n#-- End of CMOR rewriting of HAMOCC output at $(date)\n\n"  >> $err

fi

#--------------------------------------------------------------------------------
# Check whether post-processing was successful; delete temporary files
#--------------------------------------------------------------------------------

cd ${jobdir}

if [ ${POST_status:-0} = 0 ]; then
  printf "\n%s\n\n" " |- Post processing was successfull"
  if [ -f ${expid}.post.${startdate} ]; then
    printf " |- Removing old script and control files\n\n"
    ${rm} -f ${expid}.post.${startdate} my_${expid}.post.${startdate}.o*
  fi
  #
  #-- delete temporary CMIP5 archive file
  #
    # for all components: tmpdir_post
  #
  #-- delete CMOR formatted backup files
  #
  printf "%s\n" " |- Deleting backup files of the previous year "
  cd $c5archdir
  rm -f */*/*/${member}/*_*_${esmmod}-${res_mod}_${expName}_${member}_*-${prevyear}*.nc.save

  #
  #-- set Unix group of CMIP5 archive files
  #
  #chgrp -R ik0555 $c5archdir # better: set sticky to all directories
  
else
  printf "   |- ERROR   : Status = ${POST_status}\n"
  printf "   |-         : Post processing was NOT successfull.\n"
  printf "   |- WARNING : The processing branch is stopped:\n"
  printf "   |-         : no more processing scripts (arch etc.) is submitted;\n"
  printf "   |- INFO    : Check the error and submit this script again.\n"
  exit 1
fi

###############################################################################
#
#-- update run dates and submit expid.arch script
#
cd ${jobdir}

cp ${expid}.arch  ${expid}.arch.${nextdate}

ed -s ${expid}.arch.${nextdate} <<EOF
1,100s/Jobnum/${jobnum}/
1,100s/Startdate/${startdate}/
1,100s/Nextdate/${nextdate}/
1,100s/Inidate/${inidate}/
1,100s/Findate/${findate}/
w
q
EOF

if ( [ "arch" = "post" ] || [ "arch" = "arch" ] ) && [ -e ${home}/${expid}/scripts/.lock_postprocessing ]; then
   print "   |- "
   print "   |- ERROR : next job ${expid}.arch.${nextdate} is not submitted, because"
   print "   |- ERROR : previous postprocessing job is terminated by an error."
   print "   |- ERROR : see lock file:  ${home}/${expid}/scripts/.lock_postprocessing"
   print "   |- "
else
   submit -q ${queueing_system_pp:-LL} ${expid}.arch.${nextdate}
fi
#------------------------------------------------------------------------------
#   EPILOGUE
#------------------------------------------------------------------------------

wait; ${job_account}

printf "\n%s\t%s\n"  " End of script at " "$(date +'%b %d %T') on $(hostname)"

exit

